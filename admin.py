"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import logging
from datetime import datetime, timedelta
from keyboards import (
    create_admin_keyboard,
    create_notifications_keyboard,
    create_analytics_keyboard,
    create_period_selection_keyboard
)
from utils import format_price, format_date
from localization import t

logger = logging.getLogger(__name__)

class AdminHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.admin_states = {}
        self.notification_manager = None
    
    def is_admin(self, telegram_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user = self.db.get_user_by_telegram_id(telegram_id)
            return user and user[0][6] == 1  # is_admin –ø–æ–ª–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
            return False
    
    def handle_admin_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if not self.is_admin(telegram_id):
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if text == '/admin' or text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self.show_admin_panel(chat_id)
        elif text == 'üì¶ –ó–∞–∫–∞–∑—ã':
            self.show_orders_management(chat_id)
        elif text == 'üõ† –¢–æ–≤–∞—Ä—ã':
            self.show_products_management(chat_id)
        elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            self.show_users_management(chat_id)
        elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
            self.show_analytics_menu(chat_id)
        elif text == 'üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
            self.show_security_panel(chat_id)
        elif text == 'üí∞ –§–∏–Ω–∞–Ω—Å—ã':
            self.show_financial_reports(chat_id)
        elif text == 'üì¶ –°–∫–ª–∞–¥':
            self.show_inventory_management(chat_id)
        elif text == 'ü§ñ AI':
            self.show_ai_features(chat_id)
        elif text == 'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è':
            self.show_automation_panel(chat_id)
        elif text == 'üë• CRM':
            self.show_crm_panel(chat_id)
        elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
            self.show_broadcast_panel(chat_id)
        elif text == 'üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º':
            self.exit_admin_mode(chat_id)
    
    def show_admin_panel(self, chat_id):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().strftime('%Y-%m-%d')
            stats = self.db.execute_query('''
                SELECT 
                    COUNT(*) as orders_today,
                    COALESCE(SUM(total_amount), 0) as revenue_today,
                    COUNT(DISTINCT user_id) as customers_today
                FROM orders 
                WHERE DATE(created_at) = ?
            ''', (today,))
            
            if stats:
                orders_today, revenue_today, customers_today = stats[0]
            else:
                orders_today, revenue_today, customers_today = 0, 0, 0
            
            admin_text = f"üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            admin_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            admin_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_today}\n"
            admin_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(revenue_today)}\n"
            admin_text += f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {customers_today}\n\n"
            admin_text += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            self.bot.send_message(chat_id, admin_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def show_orders_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
            recent_orders = self.db.execute_query('''
                SELECT o.id, o.total_amount, o.status, o.created_at, u.name
                FROM orders o
                JOIN users u ON o.user_id = u.id
                ORDER BY o.created_at DESC
                LIMIT 10
            ''')
            
            if not recent_orders:
                self.bot.send_message(chat_id, "üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            orders_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            
            for order in recent_orders:
                status_emoji = self.get_status_emoji(order[2])
                orders_text += f"{status_emoji} #{order[0]} - {format_price(order[1])}\n"
                orders_text += f"üë§ {order[4]}\n"
                orders_text += f"üìÖ {format_date(order[3])}\n\n"
            
            orders_text += "üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_order_ID –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º"
            
            self.bot.send_message(chat_id, orders_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")
    
    def show_products_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
        try:
            products_count = self.db.execute_query('SELECT COUNT(*) FROM products WHERE is_active = 1')[0][0]
            low_stock = self.db.execute_query('SELECT COUNT(*) FROM products WHERE stock <= 5 AND is_active = 1')[0][0]
            
            products_text = f"üõ† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
            products_text += f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
            products_text += f"‚ö†Ô∏è –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {low_stock}\n\n"
            products_text += f"–ö–æ–º–∞–Ω–¥—ã:\n"
            products_text += f"‚Ä¢ /edit_product_ID - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            products_text += f"‚Ä¢ /delete_product_ID - —É–¥–∞–ª–∏—Ç—å\n\n"
            products_text += f"üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å"
            
            self.bot.send_message(chat_id, products_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    def show_users_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            users_stats = self.db.execute_query('''
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(CASE WHEN created_at >= date('now', '-7 days') THEN 1 END) as new_users,
                    COUNT(CASE WHEN id IN (
                        SELECT DISTINCT user_id FROM orders 
                        WHERE created_at >= date('now', '-30 days')
                    ) THEN 1 END) as active_users
                FROM users 
                WHERE is_admin = 0
            ''')[0]
            
            users_text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            users_text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats[0]}\n"
            users_text += f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users_stats[1]}\n"
            users_text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {users_stats[2]}\n\n"
            users_text += f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
            self.bot.send_message(chat_id, users_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def show_analytics_menu(self, chat_id):
        """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_text = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</b>\n\n"
        analytics_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
        
        self.bot.send_message(chat_id, analytics_text, create_analytics_keyboard())
    
    def show_security_panel(self, chat_id):
        """–ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_stats = self.db.execute_query('''
                SELECT 
                    COUNT(*) as total_logs,
                    COUNT(CASE WHEN severity = 'high' THEN 1 END) as high_severity,
                    COUNT(CASE WHEN created_at >= date('now', '-1 day') THEN 1 END) as today_events
                FROM security_logs
            ''')
            
            if security_stats:
                total_logs, high_severity, today_events = security_stats[0]
            else:
                total_logs, high_severity, today_events = 0, 0, 0
            
            security_text = f"üõ° <b>–ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
            security_text += f"üìã –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_logs}\n"
            security_text += f"üî¥ –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {high_severity}\n"
            security_text += f"üìÖ –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: {today_events}\n\n"
            security_text += f"üîí –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            
            self.bot.send_message(chat_id, security_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    def show_financial_reports(self, chat_id):
        """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
            month_revenue = self.db.execute_query('''
                SELECT 
                    COUNT(*) as orders_count,
                    SUM(total_amount) as total_revenue,
                    AVG(total_amount) as avg_order
                FROM orders 
                WHERE created_at >= date('now', '-30 days')
                AND status != 'cancelled'
            ''')[0]
            
            financial_text = f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</b>\n\n"
            financial_text += f"üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>\n"
            financial_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {month_revenue[0]}\n"
            financial_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(month_revenue[1] or 0)}\n"
            financial_text += f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_price(month_revenue[2] or 0)}\n\n"
            financial_text += f"üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
            self.bot.send_message(chat_id, financial_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    def show_inventory_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
            inventory_stats = self.db.execute_query('''
                SELECT 
                    COUNT(*) as total_products,
                    SUM(stock) as total_units,
                    COUNT(CASE WHEN stock = 0 THEN 1 END) as out_of_stock,
                    COUNT(CASE WHEN stock <= 5 THEN 1 END) as low_stock
                FROM products
                WHERE is_active = 1
            ''')[0]
            
            inventory_text = f"üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º</b>\n\n"
            inventory_text += f"üõç –¢–æ–≤–∞—Ä–æ–≤: {inventory_stats[0]}\n"
            inventory_text += f"üìä –ï–¥–∏–Ω–∏—Ü –Ω–∞ —Å–∫–ª–∞–¥–µ: {inventory_stats[1]}\n"
            inventory_text += f"üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {inventory_stats[2]}\n"
            inventory_text += f"üü° –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {inventory_stats[3]}\n\n"
            
            if inventory_stats[3] > 0:
                inventory_text += f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞!"
            else:
                inventory_text += f"‚úÖ –°–∫–ª–∞–¥ –≤ –ø–æ—Ä—è–¥–∫–µ"
            
            self.bot.send_message(chat_id, inventory_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞")
    
    def show_ai_features(self, chat_id):
        """AI —Ñ—É–Ω–∫—Ü–∏–∏"""
        ai_text = f"ü§ñ <b>AI —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n"
        ai_text += f"üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        ai_text += f"üí¨ –£–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        ai_text += f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        ai_text += f"üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ –ø–æ–∏—Å–∫–µ\n\n"
        ai_text += f"üöÄ AI —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        self.bot.send_message(chat_id, ai_text, create_admin_keyboard())
    
    def show_automation_panel(self, chat_id):
        """–ü–∞–Ω–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        automation_text = f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞</b>\n\n"
        automation_text += f"üìß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        automation_text += f"üõí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–∑–∏–Ω–µ\n"
        automation_text += f"üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        automation_text += f"üìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        automation_text += f"‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        
        self.bot.send_message(chat_id, automation_text, create_admin_keyboard())
    
    def show_crm_panel(self, chat_id):
        """CRM –ø–∞–Ω–µ–ª—å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
            from crm import CRMManager
            crm = CRMManager(self.db)
            segments = crm.segment_customers()
            
            crm_text = f"üë• <b>CRM - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</b>\n\n"
            crm_text += f"üèÜ –ß–µ–º–ø–∏–æ–Ω—ã: {len(segments.get('champions', []))}\n"
            crm_text += f"üíé –õ–æ—è–ª—å–Ω—ã–µ: {len(segments.get('loyal', []))}\n"
            crm_text += f"üåü –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ: {len(segments.get('potential', []))}\n"
            crm_text += f"üÜï –ù–æ–≤—ã–µ: {len(segments.get('new', []))}\n"
            crm_text += f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {len(segments.get('need_attention', []))}\n"
            crm_text += f"üö® –í –∑–æ–Ω–µ —Ä–∏—Å–∫–∞: {len(segments.get('at_risk', []))}\n\n"
            crm_text += f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
            self.bot.send_message(chat_id, crm_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ CRM –ø–∞–Ω–µ–ª–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CRM –¥–∞–Ω–Ω—ã—Ö")
    
    def show_broadcast_panel(self, chat_id):
        """–ü–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫"""
        broadcast_text = f"üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        broadcast_text += f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
        broadcast_text += f"‚Ä¢ üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã\n"
        broadcast_text += f"‚Ä¢ üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã\n"
        broadcast_text += f"‚Ä¢ üíé VIP –∫–ª–∏–µ–Ω—Ç—ã\n"
        broadcast_text += f"‚Ä¢ üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã\n\n"
        broadcast_text += f"üí° –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å"
        
        self.bot.send_message(chat_id, broadcast_text, create_notifications_keyboard())
    
    def exit_admin_mode(self, chat_id):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞"""
        from keyboards import create_main_keyboard
        
        self.bot.send_message(
            chat_id,
            "üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º",
            create_main_keyboard()
        )
    
    def get_status_emoji(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'shipped': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        if not self.is_admin(telegram_id):
            return
        
        if data.startswith('admin_'):
            self.handle_admin_callback(callback_query)
        elif data.startswith('change_status_'):
            self.handle_status_change(callback_query)
        elif data.startswith('order_details_'):
            self.handle_order_details(callback_query)
    
    def handle_admin_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback'–æ–≤"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        if data == 'admin_back_main':
            self.show_admin_panel(chat_id)
    
    def handle_analytics_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        if data == 'analytics_sales':
            self.show_sales_analytics(chat_id)
        elif data == 'period_today':
            self.show_period_analytics(chat_id, 'today')
        elif data == 'period_week':
            self.show_period_analytics(chat_id, 'week')
        elif data == 'period_month':
            self.show_period_analytics(chat_id, 'month')
    
    def show_sales_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        period_text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>"
        self.bot.send_message(chat_id, period_text, create_period_selection_keyboard())
    
    def show_period_analytics(self, chat_id, period):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            if period == 'today':
                date_filter = datetime.now().strftime('%Y-%m-%d')
                period_name = "—Å–µ–≥–æ–¥–Ω—è"
            elif period == 'week':
                date_filter = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
                period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
            elif period == 'month':
                date_filter = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
                period_name = "–∑–∞ –º–µ—Å—è—Ü"
            else:
                return
            
            stats = self.db.execute_query('''
                SELECT 
                    COUNT(*) as orders,
                    SUM(total_amount) as revenue,
                    AVG(total_amount) as avg_order,
                    COUNT(DISTINCT user_id) as customers
                FROM orders 
                WHERE created_at >= ? AND status != 'cancelled'
            ''', (date_filter,))[0]
            
            analytics_text = f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {period_name}</b>\n\n"
            analytics_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats[0]}\n"
            analytics_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats[1] or 0)}\n"
            analytics_text += f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_price(stats[2] or 0)}\n"
            analytics_text += f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats[3]}\n\n"
            analytics_text += f"üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
            self.bot.send_message(chat_id, analytics_text, create_admin_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    def handle_order_management(self, message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        if text.startswith('/admin_order_'):
            try:
                order_id = int(text.split('_')[2])
                self.show_order_details(chat_id, order_id)
            except (ValueError, IndexError):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    def show_order_details(self, chat_id, order_id):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        try:
            order_details = self.db.get_order_details(order_id)
            
            if not order_details:
                self.bot.send_message(chat_id, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            order = order_details['order']
            items = order_details['items']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            user = self.db.execute_query(
                'SELECT name, phone, email FROM users WHERE id = ?',
                (order[1],)
            )[0]
            
            details_text = f"üìã <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
            details_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user[0]}\n"
            
            if user[1]:
                details_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[1]}\n"
            if user[2]:
                details_text += f"üìß Email: {user[2]}\n"
            
            details_text += f"\nüí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
            details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[7])}\n"
            details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}\n"
            
            status_emoji = self.get_status_emoji(order[3])
            details_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {order[3]}\n"
            
            details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã ({len(items)}):</b>\n"
            for item in items:
                details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item[1] * item[0])}\n"
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'callback_data': f'change_status_{order_id}_confirmed'},
                        {'text': 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'callback_data': f'change_status_{order_id}_shipped'}
                    ],
                    [
                        {'text': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', 'callback_data': f'change_status_{order_id}_delivered'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback_data': f'change_status_{order_id}_cancelled'}
                    ]
                ]
            }
            
            self.bot.send_message(chat_id, details_text, keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    def handle_status_change(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        try:
            parts = data.split('_')
            order_id = int(parts[2])
            new_status = parts[3]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = self.db.update_order_status(order_id, new_status)
            
            if result is not None:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                if self.notification_manager:
                    self.notification_manager.send_order_status_notification(order_id, new_status)
                
                status_names = {
                    'confirmed': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                    'shipped': '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                    'delivered': '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
                    'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω'
                }
                
                status_text = status_names.get(new_status, new_status)
                self.bot.send_message(chat_id, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} {status_text}")
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    def handle_product_commands(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        if text.startswith('/edit_product_'):
            try:
                product_id = int(text.split('_')[2])
                self.show_product_edit_options(chat_id, product_id)
            except (ValueError, IndexError):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        elif text.startswith('/delete_product_'):
            try:
                product_id = int(text.split('_')[2])
                self.confirm_product_deletion(chat_id, product_id)
            except (ValueError, IndexError):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    def show_product_edit_options(self, chat_id, product_id):
        """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            product = self.db.get_product_by_id(product_id)
            
            if not product:
                self.bot.send_message(chat_id, f"‚ùå –¢–æ–≤–∞—Ä #{product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            edit_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            edit_text += f"üõç <b>{product[1]}</b>\n"
            edit_text += f"üí∞ –¶–µ–Ω–∞: {format_price(product[3])}\n"
            edit_text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product[6]} —à—Ç.\n\n"
            edit_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            self.bot.send_message(chat_id, edit_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    
    def confirm_product_deletion(self, chat_id, product_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            product = self.db.get_product_by_id(product_id)
            
            if not product:
                self.bot.send_message(chat_id, f"‚ùå –¢–æ–≤–∞—Ä #{product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            confirm_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            confirm_text += f"üõç –¢–æ–≤–∞—Ä: {product[1]}\n"
            confirm_text += f"üí∞ –¶–µ–Ω–∞: {format_price(product[3])}\n\n"
            confirm_text += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': f'confirm_delete_{product_id}'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'cancel_delete'}
                    ]
                ]
            }
            
            self.bot.send_message(chat_id, confirm_text, keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")