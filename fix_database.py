import logging
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os

def fix_database_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    logging.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if not os.path.exists('shop_bot.db'):
        logging.info("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect('shop_bot.db')
        cursor = conn.cursor()
        
        logging.info("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute('SELECT COUNT(*) FROM categories')
        categories_count = cursor.fetchone()[0]
        
        if categories_count == 0:
            logging.info("   –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
            categories = [
                ('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –≥–∞–¥–∂–µ—Ç—ã', 'üì±'),
                ('–û–¥–µ–∂–¥–∞', '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', 'üëï'),
                ('–î–æ–º –∏ —Å–∞–¥', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏', 'üè†'),
                ('–°–ø–æ—Ä—Ç', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', '‚öΩ'),
                ('–ö—Ä–∞—Å–æ—Ç–∞', '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 'üíÑ'),
                ('–ö–Ω–∏–≥–∏', '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'üìö')
            ]
            
            cursor.executemany(
                'INSERT INTO categories (name, description, emoji) VALUES (?, ?, ?)',
                categories
            )
            logging.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        logging.info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        cursor.execute('SELECT COUNT(*) FROM products')
        products_count = cursor.fetchone()[0]
        
        if products_count == 0:
            logging.info("   –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã...")
            products = [
                ('iPhone 14', '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 14 128GB', 799.99, 1, 'https://images.pexels.com/photos/788946/pexels-photo-788946.jpeg', 50, 0, 0, 1, 600.00),
                ('Samsung Galaxy S23', '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Samsung', 699.99, 1, 'https://images.pexels.com/photos/1092644/pexels-photo-1092644.jpeg', 30, 0, 0, 1, 500.00),
                ('MacBook Air M2', '–ù–æ—É—Ç–±—É–∫ Apple MacBook Air —Å —á–∏–ø–æ–º M2', 1199.99, 1, 'https://images.pexels.com/photos/18105/pexels-photo.jpg', 20, 0, 0, 1, 900.00),
                ('–§—É—Ç–±–æ–ª–∫–∞ Nike', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ Nike Dri-FIT', 29.99, 2, 'https://images.pexels.com/photos/8532616/pexels-photo-8532616.jpeg', 100, 0, 0, 1, 15.00),
                ('–î–∂–∏–Ω—Å—ã Levi\'s', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã Levi\'s 501', 79.99, 2, 'https://images.pexels.com/photos/1598507/pexels-photo-1598507.jpeg', 75, 0, 0, 1, 40.00),
                ('–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞ Delonghi', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ñ–µ–≤–∞—Ä–∫–∞', 299.99, 3, 'https://images.pexels.com/photos/324028/pexels-photo-324028.jpeg', 25, 0, 0, 1, 180.00),
                ('–ù–∞–±–æ—Ä –ø–æ—Å—É–¥—ã', '–ù–∞–±–æ—Ä –∫–∞—Å—Ç—Ä—é–ª—å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏', 149.99, 3, 'https://images.pexels.com/photos/4226796/pexels-photo-4226796.jpeg', 40, 0, 0, 1, 80.00),
                ('–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Adidas', '–ë–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ Adidas Ultraboost', 159.99, 4, 'https://images.pexels.com/photos/2529148/pexels-photo-2529148.jpeg', 60, 0, 0, 1, 90.00),
                ('–ì–∞–Ω—Ç–µ–ª–∏ 10–∫–≥', '–ù–∞–±–æ—Ä –≥–∞–Ω—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', 89.99, 4, 'https://images.pexels.com/photos/416717/pexels-photo-416717.jpeg', 35, 0, 0, 1, 50.00),
                ('–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞', '–£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º —Å –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π', 49.99, 5, 'https://images.pexels.com/photos/3685530/pexels-photo-3685530.jpeg', 80, 0, 0, 1, 25.00),
                ('–ü–∞—Ä—Ñ—é–º Chanel', '–¢—É–∞–ª–µ—Ç–Ω–∞—è –≤–æ–¥–∞ Chanel No.5', 129.99, 5, 'https://images.pexels.com/photos/965989/pexels-photo-965989.jpeg', 45, 0, 0, 1, 70.00),
                ('–ö–Ω–∏–≥–∞ "Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"', '–£—á–µ–±–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python', 39.99, 6, 'https://images.pexels.com/photos/159711/books-bookstore-book-reading-159711.jpeg', 90, 0, 0, 1, 20.00),
                ('–†–æ–º–∞–Ω "1984"', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –î–∂–æ—Ä–¥–∂–∞ –û—Ä—É—ç–ª–ª–∞', 19.99, 6, 'https://images.pexels.com/photos/46274/pexels-photo-46274.jpeg', 120, 0, 0, 1, 10.00),
                ('–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏', 'AirPods Pro —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º', 249.99, 1, 'https://images.pexels.com/photos/3394650/pexels-photo-3394650.jpeg', 70, 0, 0, 1, 150.00)
            ]
            
            cursor.executemany('''
                INSERT INTO products (name, description, price, category_id, image_url, stock, views, sales_count, is_active, cost_price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', products)
            logging.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        logging.info("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute('UPDATE products SET is_active = 1 WHERE is_active = 0')
        activated = cursor.rowcount
        if activated > 0:
            logging.info(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        cursor.execute('UPDATE products SET stock = 50 WHERE stock <= 0')
        restocked = cursor.rowcount
        if restocked > 0:
            logging.info(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è {restocked} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ .env
        admin_telegram_id = os.getenv('ADMIN_TELEGRAM_ID', '5720497431')
        admin_name = os.getenv('ADMIN_NAME', 'Admin')
        
        if admin_telegram_id:
            try:
                admin_telegram_id = int(admin_telegram_id)
                
                cursor.execute('SELECT id, is_admin FROM users WHERE telegram_id = ?', (admin_telegram_id,))
                existing_admin = cursor.fetchone()
                
                if existing_admin:
                    if existing_admin[1] != 1:
                        cursor.execute('UPDATE users SET is_admin = 1 WHERE telegram_id = ?', (admin_telegram_id,))
                        logging.info(f"   ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {admin_name}")
                    else:
                        logging.info(f"   ‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin_name}")
                else:
                    cursor.execute('''
                        INSERT INTO users (telegram_id, name, is_admin, language, created_at)
                        VALUES (?, ?, 1, 'ru', CURRENT_TIMESTAMP)
                    ''', (admin_telegram_id, admin_name))
                    logging.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: {admin_name} (ID: {admin_telegram_id})")
                    
            except ValueError:
                logging.info(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ADMIN_TELEGRAM_ID: {admin_telegram_id}")
        else:
            logging.info("   ‚ö†Ô∏è ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é —Å ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            cursor.execute('''
                INSERT OR IGNORE INTO users (telegram_id, name, is_admin, language, created_at)
                VALUES (5720497431, 'Admin', 1, 'ru', CURRENT_TIMESTAMP)
            ''')
            logging.info("   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Admin (ID: 5720497431)")
        
        conn.commit()
        conn.close()
        
        logging.info("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        return True
        
    except Exception as e:
        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        return False

def show_debug_info():
    """–ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logging.info("\nüîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    
    try:
        conn = sqlite3.connect('shop_bot.db')
        cursor = conn.cursor()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        logging.info(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {[table[0] for table in tables]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id, name, emoji FROM categories LIMIT 3')
        sample_categories = cursor.fetchall()
        logging.info(f"üìÇ –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {sample_categories}")
        
        cursor.execute('SELECT id, name, category_id, is_active, stock FROM products LIMIT 3')
        sample_products = cursor.fetchall()
        logging.info(f"üõç –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤: {sample_products}")
        
        conn.close()
        
    except Exception as e:
        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        pass
    
    logging.info("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞")
    logging.info("=" * 40)
    
    if fix_database_issues():
        show_debug_info()
        logging.info("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python main.py")
    else:
        logging.info("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")