"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import logging
from utils import validate_phone, validate_email
from datetime import datetime
from keyboards import (
    create_main_keyboard, create_categories_keyboard, create_subcategories_keyboard,
    create_products_keyboard, create_product_inline_keyboard, create_cart_keyboard,
    create_registration_keyboard, create_order_keyboard, create_back_keyboard,
    create_confirmation_keyboard, create_search_filters_keyboard,
    create_price_filter_keyboard, create_rating_keyboard,
    create_order_details_keyboard, create_language_keyboard,
    create_payment_methods_keyboard, create_cart_item_keyboard
)
from keyboards import create_product_inline_keyboard_with_qty
from utils import (
    format_price, format_date, validate_email, validate_phone,
    truncate_text, create_pagination_keyboard, escape_html,
    calculate_cart_total, format_cart_summary, get_order_status_emoji,
    get_order_status_text, create_product_card, create_stars_display
)
from localization import t, get_user_language
from payments import PaymentProcessor, create_payment_keyboard, format_payment_info

logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = PaymentProcessor()
    
    def handle_message(self, message):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data and text != '/start':
                self.send_registration_prompt(chat_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_language = 'ru'
            if user_data:
                user_language = user_data[0][5] or 'ru'
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text == '/start':
                self.handle_start_command(message)
            elif text == '/help':
                self.handle_help_command(message, user_language)
            elif text.startswith('/order_'):
                self.handle_order_command(message)
            elif text.startswith('/track_'):
                self.handle_track_command(message)
            elif text.startswith('/promo_'):
                self.handle_promo_command(message)
            elif text.startswith('/restore_'):
                self.handle_restore_command(message)
            elif text == '/notifications':
                self.show_user_notifications(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif telegram_id in self.user_states:
                self.handle_user_state(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            elif text in ['üõç –ö–∞—Ç–∞–ª–æ–≥', 'üõç Katalog', 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥']:
                self.show_catalog(message)
            elif text == 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
                self.show_catalog(message)
            elif text.startswith('üõç '):
                self.handle_product_selection(message)
            elif text in ['üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üõí Savat']:
                self.show_cart(message)
            elif text in ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìã Mening buyurtmalarim']:
                self.show_user_orders(message)
            elif text in ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë§ Profil']:
                self.show_user_profile(message)
            elif text in ['üîç –ü–æ–∏—Å–∫', 'üîç Qidiruv']:
                self.start_product_search(message)
            elif text in ['üßë‚Äçüíº –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º', "üßë‚Äçüíº Sotuvchi bo'lish"]:
                self.start_seller_application(message)
            elif text in ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', '‚ÑπÔ∏è Yordam']:
                self.handle_help_command(message, user_language)
            elif text in ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', 'üìû Biz bilan bog\'lanish']:
                self.handle_contact_request(message, user_language)
            elif text == 'üîô –ì–ª–∞–≤–Ω–∞—è' or text == 'üè† –ì–ª–∞–≤–Ω–∞—è' or text == 'üè† Bosh sahifa':
                self.show_main_menu(message)
            elif text == 'üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫':
                self.start_language_change(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            elif text.startswith('üì± ') or text.startswith('üëï ') or text.startswith('üè† ') or text.startswith('‚öΩ ') or text.startswith('üíÑ ') or text.startswith('üìö '):
                self.handle_category_selection(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥–∞
            elif text.startswith('üçé ') or text.startswith('üì± ') or text.startswith('‚úîÔ∏è ') or text.startswith('üëñ ') or text.startswith('‚òï ') or text.startswith('üëü ') or text.startswith('üíé ') or text.startswith('üìñ '):
                self.handle_subcategory_selection(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            elif text.startswith('üõç '):
                self.handle_product_selection(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
            elif telegram_id in self.user_states and self.user_states[telegram_id] == 'searching':
                self.handle_search_query(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            elif text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
                self.start_order_process(message)
            elif text in ['üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞', 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏']:
                self.handle_payment_method_selection(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
            elif text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
                self.clear_user_cart(message)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' or text == 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥':
                self.show_catalog(message)
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            else:
                self.handle_unknown_command(message, user_language)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            self.bot.send_message(message['chat']['id'], "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        
        if user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            user_language = user_data[0][5] or 'ru'
            welcome_text = t('welcome_back', language=user_language)
            self.bot.send_message(chat_id, welcome_text, create_main_keyboard(user_language))
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            self.start_registration(message)
    
    def start_registration(self, message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
        suggested_name = message['from'].get('first_name', '')
        if message['from'].get('last_name'):
            suggested_name += f" {message['from']['last_name']}"
        
        welcome_text = t('welcome_new')
        self.bot.send_message(chat_id, welcome_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        name_text = "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        self.bot.send_message(
            chat_id, 
            name_text, 
            create_registration_keyboard('name', suggested_name)
        )
        
        self.user_states[telegram_id] = 'registration_name'
    
    def handle_user_state(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = message['from']['id']
        state = self.user_states.get(telegram_id)
        
        if state == 'registration_name':
            self.handle_registration_name(message)
        elif state == 'registration_phone':
            self.handle_registration_phone(message)
        elif state == 'registration_email':
            self.handle_registration_email(message)
        elif state == 'registration_language':
            self.handle_registration_language(message)
        elif state == 'seller_name':
            self.handle_seller_name(message)
        elif state == 'seller_phone':
            self.handle_seller_phone(message)
        elif state == 'seller_brand':
            self.handle_seller_brand(message)
        elif state == 'seller_products':
            self.handle_seller_products(message)
        elif state == 'searching':
            self.handle_search_query(message)
        elif state == 'order_address':
            self.handle_order_address(message)
        elif state == 'changing_language':
            self.handle_language_change(message)
        elif state.startswith('rating_product_'):
            self.handle_product_rating(message)
    
    def handle_registration_name(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            self.bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        if len(text) < 2:
            self.bot.send_message(chat_id, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if not hasattr(self, 'registration_data'):
            self.registration_data = {}
        self.registration_data[telegram_id] = {'name': text}
        
        phone_text = "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:"
        self.bot.send_message(chat_id, phone_text, create_registration_keyboard('phone'))
        
        self.user_states[telegram_id] = 'registration_phone'
    
    def handle_registration_phone(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        phone = None
        
        if text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            phone = None
        elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            if hasattr(self, 'registration_data') and telegram_id in self.registration_data:
                del self.registration_data[telegram_id]
            self.bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        elif 'contact' in message:
            phone = message['contact']['phone_number']
        else:
            phone = validate_phone(text)
            if not phone:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        
        self.registration_data[telegram_id]['phone'] = phone
        
        email_text = "üìß –í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
        self.bot.send_message(chat_id, email_text, create_registration_keyboard('email'))
        
        self.user_states[telegram_id] = 'registration_email'
    
    def handle_registration_email(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        email = None
        
        if text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            email = None
        elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            if hasattr(self, 'registration_data') and telegram_id in self.registration_data:
                del self.registration_data[telegram_id]
            self.bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        else:
            if not validate_email(text):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            email = text
        
        self.registration_data[telegram_id]['email'] = email
        
        language_text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:"
        self.bot.send_message(chat_id, language_text, create_registration_keyboard('language'))
        
        self.user_states[telegram_id] = 'registration_language'
    
    def handle_registration_language(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            language = 'ru'
        elif text == "üá∫üáø O'zbekcha":
            language = 'uz'
        else:
            self.bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg_data = self.registration_data.get(telegram_id, {})
        
        user_id = self.db.add_user(
            telegram_id,
            reg_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
            reg_data.get('phone'),
            reg_data.get('email'),
            language
        )
        
        if user_id:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            self.db.execute_query(
                'INSERT OR IGNORE INTO loyalty_points (user_id) VALUES (?)',
                (user_id,)
            )
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_complete = t('registration_complete', language=language)
            self.bot.send_message(chat_id, welcome_complete, create_main_keyboard(language))
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            if hasattr(self.bot, 'marketing_automation') and self.bot.marketing_automation:
                self.bot.marketing_automation.create_welcome_series(user_id)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del self.user_states[telegram_id]
        if hasattr(self, 'registration_data') and telegram_id in self.registration_data:
            del self.registration_data[telegram_id]
    
    def send_registration_prompt(self, chat_id):
        """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        prompt_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        self.bot.send_message(chat_id, prompt_text)
    
    def handle_help_command(self, message, language='ru'):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        chat_id = message['chat']['id']
        help_text = t('help', language=language)
        self.bot.send_message(chat_id, help_text, create_main_keyboard(language))

    def handle_contact_request(self, message, language='ru'):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—å"""
        from config import CONTACT_INFO
        chat_id = message['chat']['id']

        if language == 'uz':
            contact_text = f"""
üìû <b>Biz bilan bog'lanish</b>

üè¢ <b>Call-—Ü–µ–Ω—Ç—Ä:</b>
üì± {CONTACT_INFO['call_center_phone']}

üí¨ <b>Telegram yordam:</b>
üë§ {CONTACT_INFO['support_telegram']}

üïê <b>Ish vaqti:</b>
{CONTACT_INFO['working_hours']}

üìß Savollaringiz bo'lsa, biz bilan bog'laning!
Biz doimo yordam berishga tayyormiz! ü§ù
"""
        else:
            contact_text = f"""
üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>

üè¢ <b>Call-—Ü–µ–Ω—Ç—Ä:</b>
üì± {CONTACT_INFO['call_center_phone']}

üí¨ <b>Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üë§ {CONTACT_INFO['support_telegram']}

üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
{CONTACT_INFO['working_hours']}

üìß –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!
–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ü§ù
"""

        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å', 'url': f'tel:{CONTACT_INFO["call_center_phone"]}'},
                    {'text': 'üí¨ Telegram', 'url': f'https://t.me/{CONTACT_INFO["support_telegram"].replace("@", "")}'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥' if language == 'ru' else 'üîô Orqaga', 'callback_data': 'back_to_main'}
                ]
            ]
        }

        self.bot.send_message(chat_id, contact_text, keyboard)

    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']

        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if user_data:
            language = user_data[0][5] or 'ru'
            welcome_text = t('welcome_back', language=language)
        else:
            language = 'ru'
            welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"

        self.bot.send_message(chat_id, welcome_text, create_main_keyboard(language))
    
    def show_catalog(self, message):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        chat_id = message['chat']['id']
        
        categories = self.db.get_categories()
        
        if categories:
            catalog_text = "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            self.bot.send_message(chat_id, catalog_text, create_categories_keyboard(categories))
        else:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def handle_category_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = text.split(' ', 1)[-1].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ
        category = self.db.execute_query(
            'SELECT id FROM categories WHERE name = ? AND is_active = 1',
            (category_name,)
        )
        
        if category:
            category_id = category[0][0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥—ã
            subcategories = self.db.get_products_by_category(category_id)
            
            if subcategories:
                subcategory_text = f"üìÇ <b>{category_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
                self.bot.send_message(chat_id, subcategory_text, create_subcategories_keyboard(subcategories))
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä—è–º–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                products = self.db.execute_query(
                    'SELECT * FROM products WHERE category_id = ? AND is_active = 1 ORDER BY name LIMIT 30',
                    (category_id,)
                )
                if products:
                    products_text = f"üõç <b>{category_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
                    self.bot.send_message(chat_id, products_text, create_products_keyboard(products, show_back=True))
                else:
                    self.bot.send_message(chat_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def handle_subcategory_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_name = text.split(' ', 1)[-1].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        subcategory = self.db.execute_query(
            'SELECT id FROM subcategories WHERE name = ? AND is_active = 1',
            (subcategory_name,)
        )
        
        if subcategory:
            subcategory_id = subcategory[0][0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = self.db.get_products_by_subcategory(subcategory_id)
            
            if products:
                products_text = f"üõç <b>{subcategory_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
                self.bot.send_message(chat_id, products_text, create_products_keyboard(products))
            else:
                self.bot.send_message(chat_id, f"‚ùå –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            self.bot.send_message(chat_id, "‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def handle_product_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É
        product_info = text.split(' ', 1)[-1].strip()  # –£–±–∏—Ä–∞–µ–º "üõç "
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É
        if ' - $' in product_info:
            product_name = product_info.split(' - $')[0]
        else:
            product_name = product_info
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = self.db.execute_query(
            'SELECT * FROM products WHERE name = ? AND is_active = 1',
            (product_name,)
        )
        
        if product:
            self.show_product_details(chat_id, product[0])
        else:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def show_product_details(self, chat_id, product):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            self.db.increment_product_views(product[0])
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
            reviews = self.db.get_product_reviews(product[0])
            avg_rating = sum(review[0] for review in reviews) / len(reviews) if reviews else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
            product_card = create_product_card(product)
            
            if avg_rating > 0:
                stars = create_stars_display(avg_rating)
                product_card += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars} ({avg_rating:.1f}/5, {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if product[7]:  # image_url
                self.bot.send_photo(
                    chat_id, 
                    product[7], 
                    product_card, 
                    create_product_inline_keyboard_with_qty(product[0], qty=1, category_id=product[4], subcategory_id=product[5])
                )
            else:
                self.bot.send_message(
                    chat_id, 
                    product_card, 
                    create_product_inline_keyboard_with_qty(product[0], qty=1, category_id=product[4], subcategory_id=product[5])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
    
    def show_cart(self, message):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_cart_text = t('empty_cart', language=user_data[0][5])
            self.bot.send_message(chat_id, empty_cart_text, create_cart_keyboard(False))
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total_amount = 0
        
        for item in cart_items:
            item_total = item[2] * item[3]  # price * quantity
            total_amount += item_total
            
            cart_text += f"üõç <b>{item[1]}</b>\n"
            cart_text += f"üí∞ {format_price(item[2])} √ó {item[3]} = {format_price(item_total)}\n\n"
        
        cart_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {format_price(total_amount)}</b>"
        
        self.bot.send_message(chat_id, cart_text, create_cart_keyboard(True))
    
    def show_user_orders(self, message):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            self.bot.send_message(chat_id, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = get_order_status_emoji(order[3])
            status_text = get_order_status_text(order[3])
            
            orders_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n"
            orders_text += f"üí∞ {format_price(order[2])}\n"
            orders_text += f"üìÖ {format_date(order[7])}\n"
            orders_text += f"üìä {status_text}\n\n"
        
        orders_text += "üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order_ID –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"
        
        self.bot.send_message(chat_id, orders_text, create_back_keyboard())
    
    def show_user_profile(self, message):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user = user_data[0]
        user_id = user[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        order_stats = self.db.execute_query('''
            SELECT 
                COUNT(*) as total_orders,
                COALESCE(SUM(total_amount), 0) as total_spent,
                MAX(created_at) as last_order
            FROM orders 
            WHERE user_id = ? AND status != 'cancelled'
        ''', (user_id,))[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        profile_text += f"üìù –ò–º—è: {user[2]}\n"
        
        if user[3]:
            profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\n"
        if user[4]:
            profile_text += f"üìß Email: {user[4]}\n"
        
        lang = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if user[5] == "ru" else "üá∫üáø O'zbekcha"
        profile_text += f"üåç –Ø–∑—ã–∫: {lang}\n"
        profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_date(user[7])}\n\n"
        
        profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        profile_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {order_stats[0]}\n"
        profile_text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_price(order_stats[1])}\n"
        
        if order_stats[2]:
            profile_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {format_date(order_stats[2])}\n"
        
        profile_text += f"\n‚≠ê <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>\n"
        profile_text += f"üíé –£—Ä–æ–≤–µ–Ω—å: {loyalty_data[3]}\n"
        profile_text += f"üèÜ –ë–∞–ª–ª–æ–≤: {loyalty_data[1]}\n\n"
        profile_text += f"üåç –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: /language"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        profile_keyboard = {
            'keyboard': [
                ['üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', '‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'],
                ['üîô –ì–ª–∞–≤–Ω–∞—è']
            ],
            'resize_keyboard': True
        }
        
        self.bot.send_message(chat_id, profile_text, profile_keyboard)
    
    def start_product_search(self, message):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        search_text = "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        self.bot.send_message(chat_id, search_text, create_back_keyboard())
        
        self.user_states[telegram_id] = 'searching'
    
    def handle_search_query(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if text in ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–∞—è']:
            del self.user_states[telegram_id]
            self.show_main_menu(message)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        products = self.db.search_products(text)
        
        if products:
            search_results = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> '{text}'\n\n"
            
            for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                search_results += f"üõç <b>{product[1]}</b>\n"
                search_results += f"üí∞ {format_price(product[3])}\n"
                search_results += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product[6]} —à—Ç.\n\n"
            
            if len(products) > 10:
                search_results += f"... –∏ –µ—â–µ {len(products) - 10} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            
            search_results += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
            
            self.bot.send_message(chat_id, search_results, create_products_keyboard(products[:10], False))
        else:
            no_results = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            no_results += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            no_results += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            no_results += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            no_results += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
            
            self.bot.send_message(chat_id, no_results, create_back_keyboard())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if telegram_id in self.user_states:
            del self.user_states[telegram_id]
    
    def start_order_process(self, message):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_cart_text = t('empty_cart', language=user_data[0][5])
            self.bot.send_message(chat_id, empty_cart_text)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
        total_amount = calculate_cart_total(cart_items)
        
        order_summary = "üì¶ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        order_summary += f"üõç –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}\n"
        order_summary += f"üí∞ –°—É–º–º–∞: {format_price(total_amount)}\n\n"
        order_summary += "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        
        from keyboards import create_address_location_keyboard
        self.bot.send_message(chat_id, order_summary, create_address_location_keyboard())
        self.user_states[telegram_id] = 'order_address'
    
    def handle_order_address(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫
        location = message.get('location')
        if location and isinstance(location, dict) and 'latitude' in location and 'longitude' in location:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
            if not hasattr(self, 'order_data'):
                self.order_data = {}
            self.order_data[telegram_id] = self.order_data.get(telegram_id, {})
            self.order_data[telegram_id]['lat'] = float(location.get('latitude'))
            self.order_data[telegram_id]['lon'] = float(location.get('longitude'))
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å—Ç–∞–≤–∏–º –ø–æ–º–µ—Ç–∫—É
            self.order_data[telegram_id].setdefault('address', '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

            user_data = self.db.get_user_by_telegram_id(telegram_id)
            language = user_data[0][5] if user_data else 'ru'
            payment_text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            self.bot.send_message(chat_id, payment_text, create_payment_methods_keyboard(language))
            del self.user_states[telegram_id]
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å" ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
        if text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å':
            self.bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º:")
            return

        if text in ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–∞—è']:
            del self.user_states[telegram_id]
            self.show_main_menu(message)
            return
        
        if len(text) < 10:
            self.bot.send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        if not hasattr(self, 'order_data'):
            self.order_data = {}
        
        self.order_data[telegram_id] = {'address': text}
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        language = user_data[0][5] if user_data else 'ru'
        
        payment_text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        self.bot.send_message(chat_id, payment_text, create_payment_methods_keyboard(language))
        
        del self.user_states[telegram_id]
    
    def handle_payment_method_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            self.bot.send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        if text in ['üí≥ Payme', 'üîµ Click', 'üíé Stripe', 'üü° PayPal', 'ü¶ì ZoodPay']:
            payment_method = 'online'
        elif text in ['üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏', 'üíµ Qabul qilishda naqd']:
            payment_method = 'cash'
        else:
            self.bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        total_amount = calculate_cart_total(cart_items)
        order_data = getattr(self, 'order_data', {}).get(telegram_id, {})
        delivery_address = order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        order_id = self.db.create_order(user_id, total_amount, delivery_address, payment_method, order_data.get('lat'), order_data.get('lon'))
        
        if order_id:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            self.db.add_order_items(order_id, cart_items)
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            self.db.clear_cart(user_id)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            points_earned = int(total_amount * 0.05)  # 5% –æ—Ç —Å—É–º–º—ã
            self.db.update_loyalty_points(user_id, points_earned)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            success_text = f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            success_text += f"üí∞ –°—É–º–º–∞: {format_price(total_amount)}\n"
            success_text += f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
            success_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_method}\n"
            success_text += f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {points_earned}\n\n"
            
            if payment_method == 'online':
                success_text += "üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"
            else:
                success_text += "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

            user_language = user_data[0][5] or 'ru'
            self.bot.send_message(chat_id, success_text, create_main_keyboard(user_language))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if self.notification_manager:
                self.notification_manager.send_order_notification_to_admins(order_id)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            if hasattr(self, 'order_data') and telegram_id in self.order_data:
                del self.order_data[telegram_id]
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    def clear_user_cart(self, message):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        
        confirm_text = "üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?"
        keyboard = create_confirmation_keyboard()
        
        self.bot.send_message(chat_id, confirm_text, keyboard)
        self.user_states[telegram_id] = f'confirm_clear_cart_{user_id}'
    
    def show_loyalty_program(self, message):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        
        loyalty_text = f"‚≠ê <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        loyalty_text += f"üíé –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{loyalty_data[3]}</b>\n"
        loyalty_text += f"üèÜ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: {loyalty_data[1]}\n"
        loyalty_text += f"üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {loyalty_data[2]}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
        loyalty_text += f"üèÖ <b>–£—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>\n"
        loyalty_text += f"ü•â Bronze (0+ –±–∞–ª–ª–æ–≤) - 0% —Å–∫–∏–¥–∫–∞\n"
        loyalty_text += f"ü•à Silver (100+ –±–∞–ª–ª–æ–≤) - 5% —Å–∫–∏–¥–∫–∞\n"
        loyalty_text += f"ü•á Gold (500+ –±–∞–ª–ª–æ–≤) - 10% —Å–∫–∏–¥–∫–∞\n"
        loyalty_text += f"üíé Platinum (1500+ –±–∞–ª–ª–æ–≤) - 15% —Å–∫–∏–¥–∫–∞\n"
        loyalty_text += f"üíç Diamond (5000+ –±–∞–ª–ª–æ–≤) - 20% —Å–∫–∏–¥–∫–∞\n\n"
        
        loyalty_text += f"üí° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 5% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏!"
        
        self.bot.send_message(chat_id, loyalty_text, create_back_keyboard())
    
    def show_available_promos(self, message):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        
        try:
            from promotions import PromotionManager
            promo_manager = PromotionManager(self.db)
            available_promos = promo_manager.get_user_available_promos(user_id)
            
            if available_promos:
                promos_text = f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
                
                for promo in available_promos:
                    promos_text += f"üè∑ <b>{promo[1]}</b>\n"
                    
                    if promo[2] == 'percentage':
                        promos_text += f"üí∞ –°–∫–∏–¥–∫–∞: {promo[3]}%\n"
                    else:
                        promos_text += f"üí∞ –°–∫–∏–¥–∫–∞: {format_price(promo[3])}\n"
                    
                    if promo[4] > 0:
                        promos_text += f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_price(promo[4])}\n"
                    
                    if promo[6]:
                        promos_text += f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_date(promo[6])}\n"
                    
                    promos_text += f"üìù {promo[7]}\n\n"
                
                promos_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
            else:
                promos_text = f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
                promos_text += f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n"
                promos_text += f"üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ü–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!"
            
            self.bot.send_message(chat_id, promos_text, create_back_keyboard())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    
    def start_language_change(self, message):
        """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        language_text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:"
        self.bot.send_message(chat_id, language_text, create_language_keyboard())
        
        self.user_states[telegram_id] = 'changing_language'
    
    def handle_language_change(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            self.show_main_menu(message)
            return
        
        if text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            new_language = 'ru'
        elif text == "üá∫üáø O'zbekcha":
            new_language = 'uz'
        else:
            self.bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if user_data:
            user_id = user_data[0][0]
            self.db.update_user_language(user_id, new_language)
            
            success_text = t('language_changed', language=new_language)
            self.bot.send_message(chat_id, success_text, create_main_keyboard(new_language))
        
        del self.user_states[telegram_id]
    
    def handle_order_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        try:
            order_id = int(text.split('_')[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            order = self.db.execute_query(
                'SELECT * FROM orders WHERE id = ? AND user_id = ?',
                (order_id, user_id)
            )
            
            if order:
                order_details = self.db.get_order_details(order_id)
                self.show_detailed_order(chat_id, order_details)
            else:
                self.bot.send_message(chat_id, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except (ValueError, IndexError):
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    
    def show_detailed_order(self, chat_id, order_details):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        order = order_details['order']
        items = order_details['items']
        
        status_emoji = get_order_status_emoji(order[3])
        status_text = get_order_status_text(order[3])
        
        details_text = f"üìã <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
        details_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
        details_text += f"üí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
        details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[7])}\n"
        details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}\n\n"
        
        details_text += f"üõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item in items:
            details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item[1] * item[0])}\n"
        
        if order[6] > 0:  # promo_discount
            details_text += f"\nüéÅ –°–∫–∏–¥–∫–∞: -{format_price(order[6])}"
        
        self.bot.send_message(chat_id, details_text, create_order_details_keyboard(order[0]))
    
    def handle_track_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        try:
            tracking_number = text.split('_')[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            if hasattr(self.bot, 'logistics_manager'):
                tracking_info = self.bot.logistics_manager.track_shipment(tracking_number)
                
                if tracking_info:
                    track_text = f"üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏</b>\n\n"
                    track_text += f"üè∑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {tracking_number}\n"
                    track_text += f"üìä –°—Ç–∞—Ç—É—Å: {tracking_info['current_status']}\n"
                    track_text += f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {format_date(tracking_info['estimated_delivery'])}\n\n"
                    
                    track_text += f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
                    for event in tracking_info['history']:
                        track_text += f"‚Ä¢ {event['description']} ({event['location']})\n"
                        track_text += f"  üìÖ {format_date(event['timestamp'])}\n"
                    
                    self.bot.send_message(chat_id, track_text)
                else:
                    self.bot.send_message(chat_id, f"‚ùå –ü–æ—Å—ã–ª–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {tracking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                self.bot.send_message(chat_id, "‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except (ValueError, IndexError):
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")
    
    def handle_promo_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        try:
            promo_code = text.split('_')[1].upper()
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            cart_items = self.db.get_cart_items(user_id)
            
            if not cart_items:
                self.bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")
                return
            
            cart_total = calculate_cart_total(cart_items)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            from promotions import PromotionManager
            promo_manager = PromotionManager(self.db)
            validation = promo_manager.validate_promo_code(promo_code, user_id, cart_total)
            
            if validation['valid']:
                promo_text = f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\n"
                promo_text += f"üè∑ –ö–æ–¥: {promo_code}\n"
                promo_text += f"üí∞ –°–∫–∏–¥–∫–∞: {format_price(validation['discount_amount'])}\n"
                promo_text += f"üìä –ù–æ–≤–∞—è —Å—É–º–º–∞: {format_price(cart_total - validation['discount_amount'])}\n\n"
                promo_text += f"üõí –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫—É"
                
                self.bot.send_message(chat_id, promo_text)
            else:
                self.bot.send_message(chat_id, f"‚ùå {validation['error']}")
                
        except (ValueError, IndexError):
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    
    def handle_restore_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        try:
            restore_id = text.split('_')[1]
            
            restore_text = f"üíæ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            restore_text += f"üîç ID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {restore_id}\n\n"
            restore_text += f"üí° –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
            
            self.bot.send_message(chat_id, restore_text)
            
        except (ValueError, IndexError):
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def show_user_notifications(self, message):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        notifications = self.db.get_unread_notifications(user_id)
        
        if not notifications:
            self.bot.send_message(chat_id, "üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for notif in notifications:
            type_emoji = {
                'order': 'üì¶',
                'order_status': 'üìã',
                'promotion': 'üéÅ',
                'system': '‚öôÔ∏è',
                'info': '‚ÑπÔ∏è'
            }.get(notif[4], '‚ÑπÔ∏è')
            
            notif_text = f"{type_emoji} <b>{notif[2]}</b>\n\n"
            notif_text += f"{notif[3]}\n\n"
            notif_text += f"üìÖ {format_date(notif[6])}"
            
            self.bot.send_message(chat_id, notif_text)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            self.db.mark_notification_read(notif[0])
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            if data == 'back_to_categories':
                msg = {'chat': {'id': chat_id}}
                self.show_catalog(msg)
            elif data.startswith('back_to_category_'):
                try:
                    cid = int(data.split('_')[-1])
                except Exception:
                    cid = None
                if cid:
                    # –ü–æ–∫–∞–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    cat_row = self.db.execute_query('SELECT name FROM categories WHERE id=?', (cid,))
                    name = cat_row[0][0] if cat_row else ''
                    subs = self.db.get_products_by_category(cid)
                    if subs:
                        self.bot.send_message(chat_id, f"üìÇ <b>{name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", create_subcategories_keyboard(subs))
                    else:
                        self.bot.send_message(chat_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    msg = {'chat': {'id': chat_id}}
                    self.show_catalog(msg)
            elif data == 'go_to_cart':
                # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
                msg = {'chat': {'id': chat_id}, 'from': {'id': telegram_id}}
                self.show_cart(msg)
            elif data.startswith('back_to_subcategory_'):
                try:
                    sid = int(data.split('_')[-1])
                except Exception:
                    sid = None
                if sid:
                    # –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    sub_row = self.db.execute_query('SELECT name FROM subcategories WHERE id=?', (sid,))
                    subname = sub_row[0][0] if sub_row else '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
                    products = self.db.get_products_by_subcategory(sid)
                    if products:
                        self.bot.send_message(chat_id, f"üõç <b>{subname}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", create_products_keyboard(products))
                    else:
                        self.bot.send_message(chat_id, f"‚ùå –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subname}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    msg = {'chat': {'id': chat_id}}
                    self.show_catalog(msg)
            elif data.startswith('qty_inc_') or data.startswith('qty_dec_'):
                parts = data.split('_')
                try:
                    pid = int(parts[2]); qty = int(parts[3])
                except (ValueError, IndexError):
                    return
                new_qty = qty + 1 if data.startswith('qty_inc_') else max(1, qty - 1)
                kb = create_product_inline_keyboard_with_qty(pid, new_qty)
                message_id = callback_query['message']['message_id']
                self.bot.edit_message_reply_markup(chat_id, message_id, kb)
            elif data.startswith('add_to_cart_'):
                self.handle_add_to_cart(callback_query)
            elif data.startswith('add_to_favorites_'):
                self.handle_add_to_favorites(callback_query)
            elif data.startswith('reviews_'):
                self.handle_show_reviews(callback_query)
            elif data.startswith('rate_product_'):
                self.handle_rate_product(callback_query)
            elif data.startswith('cart_'):
                self.handle_cart_action(callback_query)
            elif data.startswith('pay_'):
                self.handle_payment_selection(callback_query)
            elif data == 'cancel_payment':
                self.bot.send_message(chat_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def handle_add_to_cart(self, callback_query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        try:
            product_id = int(data.split('_')[3])
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            result = self.db.add_to_cart(user_id, product_id, 1)
            
            if result:
                product = self.db.get_product_by_id(product_id)
                success_text = f"‚úÖ <b>{product[1]}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
                cart_keyboard = {
                    'inline_keyboard': [
                        [
                            {'text': 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'go_to_cart'},
                            {'text': 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'callback_data': 'back_to_categories'}
                        ]
                    ]
                }
                
                self.bot.send_message(chat_id, success_text, cart_keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    
    def handle_add_to_favorites(self, callback_query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        try:
            product_id = int(data.split('_')[3])
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            result = self.db.add_to_favorites(user_id, product_id)
            
            if result:
                product = self.db.get_product_by_id(product_id)
                self.bot.send_message(chat_id, f"‚ù§Ô∏è {product[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
    
    def handle_show_reviews(self, callback_query):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        try:
            product_id = int(data.split('_')[1])
            
            reviews = self.db.get_product_reviews(product_id)
            product = self.db.get_product_by_id(product_id)
            
            if reviews:
                reviews_text = f"‚≠ê <b>–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ:</b>\n{product[1]}\n\n"
                
                for review in reviews[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    stars = create_stars_display(review[0])
                    reviews_text += f"{stars} <b>{review[3]}</b>\n"
                    
                    if review[1]:
                        reviews_text += f"üí≠ {review[1]}\n"
                    
                    reviews_text += f"üìÖ {format_date(review[2])}\n\n"
                
                if len(reviews) > 5:
                    reviews_text += f"... –∏ –µ—â–µ {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤"
            else:
                reviews_text = f"‚≠ê <b>–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ:</b>\n{product[1]}\n\n"
                reviews_text += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
                reviews_text += "üí° –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!"
            
            self.bot.send_message(chat_id, reviews_text)
            
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
    
    def handle_rate_product(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        try:
            parts = data.split('_')
            product_id = int(parts[1])
            rating = int(parts[2])
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            purchased = self.db.execute_query('''
                SELECT COUNT(*) FROM order_items oi
                JOIN orders o ON oi.order_id = o.id
                WHERE o.user_id = ? AND oi.product_id = ? AND o.status != 'cancelled'
            ''', (user_id, product_id))[0][0]
            
            if purchased == 0:
                self.bot.send_message(chat_id, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            self.db.add_review(user_id, product_id, rating, "")
            
            stars = '‚≠ê' * rating
            self.bot.send_message(chat_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! {stars}")
            
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    
    def handle_cart_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        try:
            action = data.split('_')[1]
            cart_item_id = int(data.split('_')[2])
            
            if action == 'increase':
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                current_quantity = self.get_cart_item_quantity(cart_item_id)
                self.db.update_cart_quantity(cart_item_id, current_quantity + 1)
                self.update_cart_message(callback_query, cart_item_id)
                
            elif action == 'decrease':
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                current_quantity = self.get_cart_item_quantity(cart_item_id)
                if current_quantity > 1:
                    self.db.update_cart_quantity(cart_item_id, current_quantity - 1)
                    self.update_cart_message(callback_query, cart_item_id)
                else:
                    self.bot.send_message(chat_id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1")
                
            elif action == 'remove':
                # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                self.db.remove_from_cart(cart_item_id)
                self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π: {e}")
    
    def get_cart_item_quantity(self, cart_item_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        result = self.db.execute_query(
            'SELECT quantity FROM cart WHERE id = ?',
            (cart_item_id,)
        )
        return result[0][0] if result else 1
    
    def update_cart_message(self, callback_query, cart_item_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            new_quantity = self.get_cart_item_quantity(cart_item_id)
            new_keyboard = create_cart_item_keyboard(cart_item_id, new_quantity)
            
            self.bot.edit_message_reply_markup(
                callback_query['message']['chat']['id'],
                callback_query['message']['message_id'],
                new_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    
    def handle_payment_selection(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        try:
            parts = data.split('_')
            provider = parts[1]
            order_id = int(parts[2])
            
            if provider == 'cash':
                # –ù–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                self.bot.send_message(
                    chat_id,
                    f"üíµ <b>–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏</b>\n\n–ó–∞–∫–∞–∑ #{order_id} –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n\nüìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )
            else:
                # –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
                amount = float(parts[3])
                
                user_data = self.db.get_user_by_telegram_id(telegram_id)
                payment_result = self.payment_processor.create_payment(
                    provider, amount, order_id, {
                        'telegram_id': telegram_id,
                        'name': user_data[0][2] if user_data else '',
                        'phone': user_data[0][3] if user_data else '',
                        'email': user_data[0][4] if user_data else ''
                    }
                )
                
                if payment_result:
                    payment_info = format_payment_info(payment_result)
                    self.bot.send_message(chat_id, payment_info)
                else:
                    self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
                    
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
    
    def handle_unknown_command(self, message, language='ru'):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if len(text) > 2 and not text.startswith('/'):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            products = self.db.search_products(text, 5)
            
            if products:
                search_text = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}':\n\n"
                
                for product in products:
                    search_text += f"üõç {product[1]} - {format_price(product[3])}\n"
                
                search_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üîç –ü–æ–∏—Å–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"

                self.bot.send_message(chat_id, search_text, create_main_keyboard())
                return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        telegram_id = message['from']['id']
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        lang = user_data[0][5] if user_data else 'ru'

        unknown_text = "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n\n"
        unknown_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        unknown_text += "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
        unknown_text += "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        unknown_text += "‚Ä¢ üõç –ö–∞—Ç–∞–ª–æ–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤"

        self.bot.send_message(chat_id, unknown_text, create_main_keyboard(lang))

def show_contacts(self, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: —Ç–µ–ª–µ—Ñ–æ–Ω, —á–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    chat_id = message['chat']['id']
    info = CONTACT_INFO if 'CONTACT_INFO' in globals() else {}
    phone = info.get('support_phone') or info.get('call_center_phone')
    tg_username = info.get('support_telegram')
    working_hours = info.get('working_hours', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')
    about = info.get('about', '–ú—ã –Ω–∞ —Å–≤—è–∑–∏ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º.')

    # –¢–µ–∫—Å—Ç
    text_lines = [
        "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>",
    ]
    if phone:
        text_lines.append(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>")
    if tg_username:
        text_lines.append(f"‚Ä¢ Telegram: <b>{tg_username}</b>")
    if working_hours:
        text_lines.append(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {working_hours}")
    if about:
        text_lines.append(f"\n{about}")
    text = "\n".join(text_lines)

    # –ö–Ω–æ–ø–∫–∏
    from keyboards import create_contact_inline_keyboard
    kb = create_contact_inline_keyboard(phone=phone, tg_username=tg_username, chat_url=info.get('chat_url'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    self.bot.send_message(chat_id, text, kb)


# === –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: —Ç–æ–ª—å–∫–æ —á–∞—Ç + —Ç–µ–ª–µ—Ñ–æ–Ω ===
def handle_contact_request(self, message, language='ru'):
    from config import CONTACT_INFO
    chat_id = message['chat']['id']
    if language == 'uz':
        text = (
            "üìû <b>Biz bilan bog'lanish</b>\n\n"
            f"‚Ä¢ Chat: {CONTACT_INFO['support_telegram']}\n"
            f"‚Ä¢ Telefon: {CONTACT_INFO['support_phone']}"
        )
    else:
        text = (
            "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>\n\n"
            f"‚Ä¢ –ß–∞—Ç: {CONTACT_INFO['support_telegram']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {CONTACT_INFO['support_phone']}"
        )
    self.bot.send_message(chat_id, text, create_main_keyboard(language))

# === –î–∏–∞–ª–æ–≥ ¬´–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º¬ª ===
def start_seller_application(self, message):
    chat_id = message['chat']['id']
    telegram_id = message['from']['id']
    user_data = self.db.get_user_by_telegram_id(telegram_id)
    language = (user_data[0][5] if user_data else 'ru') or 'ru'
    if not hasattr(self, 'seller_data'):
        self.seller_data = {}
    self.seller_data[telegram_id] = {}
    prompt = "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?" if language == 'ru' else "üë§ Ismingiz nima?"
    self.bot.send_message(chat_id, prompt, create_back_keyboard())
    self.user_states[telegram_id] = 'seller_name'

def handle_seller_name(self, message):
    text = message.get('text', '').strip()
    chat_id = message['chat']['id']
    telegram_id = message['from']['id']
    if text in ['‚ùå –û—Ç–º–µ–Ω–∞', 'üîô –ù–∞–∑–∞–¥']:
        self.user_states.pop(telegram_id, None)
        if hasattr(self, 'seller_data'): self.seller_data.pop(telegram_id, None)
        self.bot.send_message(chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", create_main_keyboard('ru'))
        return
    if not text or len(text) < 2:
        self.bot.send_message(chat_id, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    if not hasattr(self, 'seller_data'):
        self.seller_data = {}
    self.seller_data.setdefault(telegram_id, {})['name'] = text
    self.bot.send_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +998 90 123 45 67):")
    self.user_states[telegram_id] = 'seller_phone'

def handle_seller_phone(self, message):
    text = message.get('text', '').strip()
    chat_id = message['chat']['id']
    telegram_id = message['from']['id']
    phone = validate_phone(text)
    if not phone:
        self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    self.seller_data.setdefault(telegram_id, {})['phone'] = phone
    self.bot.send_message(chat_id, "üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏:")
    self.user_states[telegram_id] = 'seller_brand'

def handle_seller_brand(self, message):
    text = message.get('text', '').strip()
    chat_id = message['chat']['id']
    telegram_id = message['from']['id']
    if len(text) < 2:
        self.bot.send_message(chat_id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞/–∫–æ–º–ø–∞–Ω–∏–∏:")
        return
    self.seller_data.setdefault(telegram_id, {})['brand'] = text
    self.bot.send_message(chat_id, "üõç –ß—Ç–æ –≤—ã –ø—Ä–æ–¥–∞—ë—Ç–µ? –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    self.user_states[telegram_id] = 'seller_products'

def handle_seller_products(self, message):
    text = message.get('text', '').strip()
    chat_id = message['chat']['id']
    telegram_id = message['from']['id']
    if len(text) < 2:
        self.bot.send_message(chat_id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–æ–¥–∞—ë—Ç–µ:")
        return
    data = self.seller_data.get(telegram_id, {})
    data['products'] = text
    try:
        admins = self.db.execute_query('SELECT telegram_id FROM users WHERE is_admin = 1')
        if not admins:
            from config import BOT_CONFIG
            admin_id = int(BOT_CONFIG.get('admin_telegram_id', '0') or 0)
            if admin_id:
                admins = [(admin_id,)]
        msg = (
            "üßë‚Äçüíº <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n"
            f"‚Ä¢ –ò–º—è: {data.get('name','')}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"‚Ä¢ –ë—Ä–µ–Ω–¥/–ö–æ–º–ø–∞–Ω–∏—è: {data.get('brand','')}\n"
            f"‚Ä¢ –ß—Ç–æ –ø—Ä–æ–¥–∞—ë—Ç: {data.get('products','')}"
        )
        for adm in admins or []:
            try:
                self.bot.send_message(adm[0], msg)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É {adm}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    self.bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", create_main_keyboard('ru'))
    self.user_states.pop(telegram_id, None)
    if hasattr(self, 'seller_data'):
        self.seller_data.pop(telegram_id, None)

# === –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫ –∫–ª–∞—Å—Å—É MessageHandler ===
MessageHandler.start_seller_application = start_seller_application
MessageHandler.handle_seller_name = handle_seller_name
MessageHandler.handle_seller_phone = handle_seller_phone
MessageHandler.handle_seller_brand = handle_seller_brand
MessageHandler.handle_seller_products = handle_seller_products
MessageHandler.handle_contact_request = handle_contact_request
