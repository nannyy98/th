"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
"""

import time
import threading
import psutil
from datetime import datetime
from config import MONITORING_CONFIG
from logger import logger

class HealthMonitor:
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot
        self.metrics = {
            'start_time': time.time(),
            'messages_processed': 0,
            'errors_count': 0,
            'last_error': None,
            'database_status': 'unknown',
            'memory_usage': 0,
            'cpu_usage': 0
        }
        self.start_monitoring()
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor_worker():
            while True:
                try:
                    self.update_metrics()
                    self.check_health()
                    time.sleep(MONITORING_CONFIG['health_check_interval'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
                    time.sleep(60)
        
        monitor_thread = threading.Thread(target=monitor_worker, daemon=True)
        monitor_thread.start()
        logger.info("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        process = psutil.Process()
        self.metrics['memory_usage'] = process.memory_info().rss / 1024 / 1024  # MB
        self.metrics['cpu_usage'] = process.cpu_percent()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db.execute_query('SELECT 1')
            self.metrics['database_status'] = 'healthy'
        except Exception as e:
            self.metrics['database_status'] = 'error'
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = time.time() - self.metrics['start_time']
        self.metrics['uptime_hours'] = uptime / 3600
    
    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        if self.metrics['memory_usage'] > 500:  # 500MB
            issues.append(f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {self.metrics['memory_usage']:.1f}MB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        if self.metrics['cpu_usage'] > 80:
            issues.append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {self.metrics['cpu_usage']:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.metrics['database_status'] != 'healthy':
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        if self.metrics['errors_count'] > 100:
            issues.append(f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {self.metrics['errors_count']}")
        
        if issues:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã: {'; '.join(issues)}")
            self.send_alert_to_admins(issues)
    
    def send_alert_to_admins(self, issues):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∞–¥–º–∏–Ω–∞–º"""
        try:
            admins = self.db.execute_query('SELECT telegram_id FROM users WHERE is_admin = 1')
            
            alert_message = "üö® <b>–°–ò–°–¢–ï–ú–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n"
            alert_message += "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n"
            for issue in issues:
                alert_message += f"‚Ä¢ {issue}\n"
            
            alert_message += f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:\n"
            alert_message += f"üíæ –ü–∞–º—è—Ç—å: {self.metrics['memory_usage']:.1f}MB\n"
            alert_message += f"‚ö° CPU: {self.metrics['cpu_usage']:.1f}%\n"
            alert_message += f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.metrics['uptime_hours']:.1f}—á\n"
            alert_message += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {self.metrics['messages_processed']}\n"
            
            for admin in admins:
                self.bot.send_message(admin[0], alert_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def increment_messages(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.metrics['messages_processed'] += 1
    
    def increment_errors(self, error_message=None):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.metrics['errors_count'] += 1
        if error_message:
            self.metrics['last_error'] = {
                'message': error_message,
                'timestamp': datetime.now().isoformat()
            }
    
    def get_health_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            'status': 'healthy' if self.metrics['database_status'] == 'healthy' else 'unhealthy',
            'uptime': self.metrics['uptime_hours'],
            'memory_mb': self.metrics['memory_usage'],
            'cpu_percent': self.metrics['cpu_usage'],
            'messages_processed': self.metrics['messages_processed'],
            'errors_count': self.metrics['errors_count'],
            'database_status': self.metrics['database_status']
        }
    
    def create_health_endpoint(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        from http.server import HTTPServer, BaseHTTPRequestHandler
        import json
        
        class HealthHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/health':
                    health_status = self.server.health_monitor.get_health_status()
                    
                    self.send_response(200 if health_status['status'] == 'healthy' else 503)
                    self.send_header('Content-Type', 'application/json')
                    self.end_headers()
                    
                    response = json.dumps(health_status, indent=2)
                    self.wfile.write(response.encode())
                else:
                    self.send_response(404)
                    self.end_headers()
            
            def log_message(self, format, *args):
                pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        
        def start_health_server():
            try:
                server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
                server.health_monitor = self
                logger.info("Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
                server.serve_forever()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()