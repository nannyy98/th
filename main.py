"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
"""
import logging

import json
import urllib.request
import urllib.parse
import os
import time
import signal
import sys
import threading
from database import DatabaseManager
from handlers import MessageHandler
from notifications import NotificationManager
from utils import format_date
from payments import PaymentProcessor
from logistics import LogisticsManager
from promotions import PromotionManager
from crm import CRMManager
from logger import logger
from health_check import HealthMonitor
from database_backup import DatabaseBackup
from scheduled_posts import ScheduledPostsManager
from config import BOT_CONFIG, BOT_TOKEN

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
from datetime import datetime
try:
    from admin import AdminHandler
except ImportError:
    AdminHandler = None
    logging.info("‚ö†Ô∏è AdminHandler –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from security import SecurityManager
except ImportError:
    SecurityManager = None
    logging.info("‚ö†Ô∏è SecurityManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")

try:
    from webhooks import WebhookManager
except ImportError:
    WebhookManager = None
    logging.info("‚ö†Ô∏è WebhookManager –Ω–µ –Ω–∞–π–¥–µ–Ω, webhook'–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from analytics import AnalyticsManager
except ImportError:
    AnalyticsManager = None
    logging.info("‚ö†Ô∏è AnalyticsManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

try:
    from financial_reports import FinancialReportsManager
except ImportError:
    FinancialReportsManager = None
    logging.info("‚ö†Ô∏è FinancialReportsManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from inventory_management import InventoryManager
except ImportError:
    InventoryManager = None
    logging.info("‚ö†Ô∏è InventoryManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

try:
    from ai_features import AIRecommendationEngine, ChatbotSupport, SmartNotificationAI
except ImportError:
    AIRecommendationEngine = None
    ChatbotSupport = None
    SmartNotificationAI = None
    logging.info("‚ö†Ô∏è AI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from marketing_automation import MarketingAutomationManager
except ImportError:
    MarketingAutomationManager = None
    logging.info("‚ö†Ô∏è MarketingAutomationManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

class TelegramShopBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
        self.running = True
        self.error_count = 0
        self.max_errors = 10
        self.data_cache = {}
        self.last_data_reload = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = DatabaseManager()
        self.setup_admin_from_env()
        self.backup_manager = DatabaseBackup(self.db.db_path)
        self.message_handler = MessageHandler(self, self.db)
        self.notification_manager = NotificationManager(self, self.db)
        self.payment_processor = PaymentProcessor()
        
        # –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.health_monitor = HealthMonitor(self.db, self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if AdminHandler:
            self.admin_handler = AdminHandler(self, self.db)
        else:
            self.admin_handler = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–µ–π
        self.logistics_manager = LogisticsManager(self.db)
        self.promotion_manager = PromotionManager(self.db)
        self.crm_manager = CRMManager(self.db)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.message_handler.notification_manager = self.notification_manager
        self.admin_handler.notification_manager = self.notification_manager
        self.message_handler.payment_processor = self.payment_processor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if SecurityManager:
            self.security_manager = SecurityManager(self.db)
        else:
            self.security_manager = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º webhook'–∏
        if WebhookManager and self.security_manager:
            self.webhook_manager = WebhookManager(self, self.db, self.security_manager)
        else:
            self.webhook_manager = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
        if AnalyticsManager:
            self.analytics = AnalyticsManager(self.db)
            self.analytics.schedule_analytics_reports()
        else:
            self.analytics = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
        if FinancialReportsManager:
            self.financial_reports = FinancialReportsManager(self.db)
        else:
            self.financial_reports = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
        if InventoryManager:
            self.inventory_manager = InventoryManager(self.db)
            self.inventory_manager.bot = self  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
        else:
            self.inventory_manager = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏–∏
        if AIRecommendationEngine:
            self.ai_recommendations = AIRecommendationEngine(self.db)
        else:
            self.ai_recommendations = None
            
        if ChatbotSupport:
            self.chatbot_support = ChatbotSupport(self.db)
        else:
            self.chatbot_support = None
            
        if SmartNotificationAI:
            self.smart_notifications = SmartNotificationAI(self.db)
        else:
            self.smart_notifications = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        if MarketingAutomationManager:
            self.marketing_automation = MarketingAutomationManager(self.db, self.notification_manager)
        else:
            self.marketing_automation = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
        try:
            from scheduled_posts import ScheduledPostsManager
            self.scheduled_posts = ScheduledPostsManager(self, self.db)
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å—Ç–æ–≤
            self.scheduled_posts.bot = self
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–º–æ–¥—É–ª—å schedule –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω): {e}")
            self.scheduled_posts = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞ –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.schedule_inventory_checks()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.marketing_automation:
            self.setup_default_automation_rules()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
        self.start_data_sync_monitor()
        
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def start_data_sync_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        def sync_worker():
            while self.running:
                try:
                    self.check_for_data_updates()
                    time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    time.sleep(30)
        
        sync_thread = threading.Thread(target=sync_worker, daemon=True)
        sync_thread.start()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
    
    def check_for_data_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_flag_file = 'data_update_flag.txt'
        force_reload_flag = 'force_reload_flag.txt'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
        if os.path.exists(force_reload_flag):
            try:
                logger.info("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –¥–∞–Ω–Ω—ã—Ö...")
                self.full_data_reload()
                os.remove(force_reload_flag)
                logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                try:
                    os.remove(force_reload_flag)
                except Exception:
                    pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        elif os.path.exists(update_flag_file):
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                with open(update_flag_file, 'r') as f:
                    update_time_str = f.read().strip()
                
                update_time = float(update_time_str)
                
                # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–µ–µ –Ω–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if update_time > self.last_data_reload:
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...")
                    self.reload_data_cache()
                    self.last_data_reload = update_time
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
                    os.remove(update_flag_file)
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–µ")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
                try:
                    os.remove(update_flag_file)
                except Exception:
                    pass
    
    def full_data_reload(self):
        """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db = DatabaseManager()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à
            self.reload_data_cache()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç—ã
            if hasattr(self, 'scheduled_posts') and self.scheduled_posts:
                self.scheduled_posts.load_schedule_from_database()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            if hasattr(self, 'marketing_automation') and self.marketing_automation:
                self.setup_default_automation_rules()
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def reload_data_cache(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.data_cache.clear()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.data_cache['categories'] = self.db.get_categories()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            self.data_cache['products'] = self.db.execute_query(
                'SELECT * FROM products WHERE is_active = 1 ORDER BY name'
            )
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥—É–ª—å
            if hasattr(self, 'scheduled_posts') and self.scheduled_posts:
                self.scheduled_posts.load_schedule_from_database()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            self.notify_admins_about_update()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def notify_admins_about_update(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            admins = self.db.execute_query('SELECT telegram_id FROM users WHERE is_admin = 1')
            
            update_message = "üîÑ <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            update_message += "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            update_message += "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            update_message += "‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
            update_message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            
            for admin in admins:
                try:
                    self.send_message(admin[0], update_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin[0]}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    def trigger_data_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        update_flag_file = 'data_update_flag.txt'
        try:
            with open(update_flag_file, 'w') as f:
                f.write(str(time.time()))
            logger.info("–§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def setup_admin_from_env(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        from config import BOT_CONFIG
        
        admin_telegram_id = BOT_CONFIG.get('admin_telegram_id')
        admin_name = BOT_CONFIG.get('admin_name', 'Admin')
        
        if admin_telegram_id:
            try:
                admin_telegram_id = int(admin_telegram_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω
                existing_admin = self.db.execute_query(
                    'SELECT id, is_admin FROM users WHERE telegram_id = ?',
                    (admin_telegram_id,)
                )
                
                if existing_admin:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if existing_admin[0][1] != 1:
                        self.db.execute_query(
                            'UPDATE users SET is_admin = 1 WHERE telegram_id = ?',
                            (admin_telegram_id,)
                        )
                        logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {admin_name}")
                    else:
                        logger.info(f"‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin_name}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                    self.db.execute_query('''
                        INSERT INTO users (telegram_id, name, is_admin, language, created_at)
                        VALUES (?, ?, 1, 'ru', CURRENT_TIMESTAMP)
                    ''', (admin_telegram_id, admin_name))
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: {admin_name} (ID: {admin_telegram_id})")
                    
            except ValueError:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ADMIN_TELEGRAM_ID: {admin_telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
        sys.exit(0)
    
    def schedule_inventory_checks(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–∫–ª–∞–¥–∞"""
        if not hasattr(self, 'inventory_manager') or not self.inventory_manager:
            return
            
        import threading
        import time
        
        def inventory_worker():
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                    if hasattr(self, 'inventory_manager') and self.inventory_manager:
                        self.inventory_manager.check_reorder_alerts()
                        self.inventory_manager.process_automatic_reorders()
                    time.sleep(21600)  # 6 —á–∞—Å–æ–≤
                except Exception as e:
                    logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞: {e}")
                    time.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        inventory_thread = threading.Thread(target=inventory_worker, daemon=True)
        inventory_thread.start()
    
    def setup_default_automation_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.marketing_automation:
                return
            
            # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
            self.marketing_automation.create_automation_rule(
                "–ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã 24—á",
                "cart_abandonment",
                {"hours_since_last_activity": 24, "min_cart_value": 20},
                [{"type": "send_notification", "target_audience": "abandoned_cart", 
                  "message_template": "üõí {name}, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ!"}]
            )
            
            # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            self.marketing_automation.create_automation_rule(
                "–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ - –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
                "customer_milestone",
                {"milestone_type": "first_order"},
                [{"type": "send_notification", "target_audience": "first_time_buyers",
                  "message_template": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, {name}! –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!"}]
            )
            
            # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
            self.marketing_automation.create_automation_rule(
                "VIP —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç",
                "customer_milestone", 
                {"milestone_type": "spending_threshold", "spending_amount": 500},
                [{"type": "send_personalized_offer", "target_segment": "champions"}]
            )
        except Exception as e:
            logging.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
    
    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                if not result.get('ok'):
                    logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
                return result
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def send_photo(self, chat_id, photo_url, caption="", reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        url = f"{self.base_url}/sendPhoto"
        data = {
            'chat_id': chat_id,
            'photo': photo_url,
            'caption': caption,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                if not result.get('ok'):
                    logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {result}")
                return result
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return None
    
    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        url = f"{self.base_url}/getUpdates"
        params = {'offset': self.offset, 'timeout': 30}
        
        try:
            url_with_params = f"{url}?{urllib.parse.urlencode(params)}"
            with urllib.request.urlopen(url_with_params) as response:
                data = json.loads(response.read().decode('utf-8'))
                return data
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üõç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while self.running:
                updates = self.get_updates()
                
                if updates and updates.get('ok'):
                    self.error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    
                    for update in updates['result']:
                        self.offset = update['update_id'] + 1
                        
                        try:
                            self.health_monitor.increment_messages()
                            
                            if 'message' in update:
                                message = update['message']
                                text = message.get('text', '')
                                telegram_id = message['from']['id']
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {telegram_id}: {text[:50]}...")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
                                if self.admin_handler and (text.startswith('/admin') or text in ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üì¶ –ó–∞–∫–∞–∑—ã', 'üõ† –¢–æ–≤–∞—Ä—ã', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º']):
                                    self.admin_handler.handle_admin_command(message)
                                elif self.admin_handler and text in ['üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', 'üì¶ –°–∫–ª–∞–¥', 'ü§ñ AI', 'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'üë• CRM', 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞']:
                                    self.admin_handler.handle_admin_command(message)
                                elif self.admin_handler and text.startswith('/admin_order_'):
                                    self.admin_handler.handle_order_management(message)
                                elif self.admin_handler and (text.startswith('/edit_product_') or text.startswith('/delete_product_')):
                                    self.admin_handler.handle_product_commands(message)
                                elif self.admin_handler and hasattr(self.admin_handler, 'admin_states') and self.admin_handler.admin_states.get(telegram_id):
                                    state = self.admin_handler.admin_states.get(telegram_id, '')
                                    if state.startswith('adding_product_'):
                                        self.admin_handler.handle_add_product_process(message)
                                    elif state.startswith('creating_broadcast_'):
                                        self.admin_handler.handle_broadcast_creation(message)
                                elif text == '/notifications':
                                    self.show_user_notifications(message)
                                else:
                                    self.message_handler.handle_message(message)
                            elif 'callback_query' in update:
                                callback_query = update['callback_query']
                                data = callback_query['data']
                                telegram_id = callback_query['from']['id']
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω callback'–∏
                                if self.admin_handler and (data.startswith('admin_') or data.startswith('change_status_') or data.startswith('order_details_')):
                                    self.admin_handler.handle_callback_query(callback_query)
                                elif self.admin_handler and (data.startswith('analytics_') or data.startswith('period_')):
                                    self.admin_handler.handle_analytics_callback(callback_query)
                                elif self.admin_handler and data.startswith('export_'):
                                    self.admin_handler.handle_export_callback(callback_query)
                                elif self.admin_handler and (data.startswith('security_') or data.startswith('unblock_user_')):
                                    if hasattr(self.admin_handler, 'handle_security_callback'):
                                        self.admin_handler.handle_security_callback(callback_query)
                                    else:
                                        self.admin_handler.handle_callback_query(callback_query)
                                elif self.admin_handler and data.startswith('broadcast_'):
                                    if hasattr(self.admin_handler, 'handle_broadcast_callback'):
                                        self.admin_handler.handle_broadcast_callback(callback_query)
                                    else:
                                        self.admin_handler.handle_callback_query(callback_query)
                                else:
                                    self.message_handler.handle_callback_query(callback_query)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
                            self.health_monitor.increment_errors(str(e))
                else:
                    logger.warning("getUpdates returned empty/invalid ‚Äî backing off")
                    time.sleep(3)
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            self.running = False
    
    def show_user_notifications(self, message):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        notifications = self.db.get_unread_notifications(user_id)
        
        if not notifications:
            self.send_message(
                chat_id,
                "üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for notif in notifications:
            type_emoji = {
                'order': 'üì¶',
                'order_status': 'üìã',
                'promotion': 'üéÅ',
                'system': '‚öôÔ∏è',
                'info': '‚ÑπÔ∏è'
            }.get(notif[4], '‚ÑπÔ∏è')
            
            notif_text = f"{type_emoji} <b>{notif[2]}</b>\n\n"
            notif_text += f"{notif[3]}\n\n"
            notif_text += f"üìÖ {format_date(notif[6])}"
            
            self.send_message(chat_id, notif_text)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            self.db.mark_notification_read(notif[0])
    
    def handle_webhook(self, provider, payload, signature=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤"""
        if not self.webhook_manager:
            return {'error': 'Webhook manager not available'}
        return self.webhook_manager.handle_payment_webhook(provider, payload, signature)
    
    def get_api_data(self, endpoint, api_key, params=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not self.webhook_manager:
            return {'error': 'API manager not available'}
            
        try:
            from webhooks import APIManager
            api_manager = APIManager(self.db, self.security_manager)
        except ImportError:
            return {'error': 'API manager not available'}
        
        if endpoint == 'products':
            return api_manager.get_products_api(
                api_key,
                params.get('category_id') if params else None,
                params.get('limit', 50) if params else 50
            )
        elif endpoint == 'create_order':
            return api_manager.create_order_api(
                api_key,
                params['user_data'],
                params['items'],
                params['delivery_address']
            )
        else:
            return {'error': 'Unknown endpoint'}
    
    def edit_message_reply_markup(self, chat_id, message_id, reply_markup):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/editMessageReplyMarkup"
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'reply_markup': json.dumps(reply_markup)
        }
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                return result.get('ok', False)
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    token = BOT_TOKEN
    if not token or token == 'YOUR_BOT_TOKEN':
        logging.info("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        logging.info("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        logging.info("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        logging.info("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        logging.info("3. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
        logging.info("   –°–ü–û–°–û–ë 1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
        logging.info("   export TELEGRAM_BOT_TOKEN='1234567890:ABCdefGHIjklMNOpqrsTUVwxyz'")
        logging.info("   ")
        logging.info("   –°–ü–û–°–û–ë 2 (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):")
        logging.info("   –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ main.py –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω")
        logging.info("\nüîó –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ README.md")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = TelegramShopBot(token)
        bot.run()
    except Exception as e:
        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()