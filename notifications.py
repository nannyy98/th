"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""
import logging

from datetime import datetime, timedelta
from utils import format_date, format_price
import threading
import time

class NotificationManager:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.push_queue = []
        self.start_push_service()
    
    def start_push_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        def push_worker():
            while True:
                try:
                    if self.push_queue:
                        notification = self.push_queue.pop(0)
                        self.send_push_notification(notification)
                    time.sleep(1)
                except Exception as e:
                    logging.info(f"–û—à–∏–±–∫–∞ push-—Å–ª—É–∂–±—ã: {e}")
        
        push_thread = threading.Thread(target=push_worker, daemon=True)
        push_thread.start()
    
    def queue_push_notification(self, user_id, title, message, notification_type='info', delay_seconds=0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        notification = {
            'user_id': user_id,
            'title': title,
            'message': message,
            'type': notification_type,
            'scheduled_time': datetime.now() + timedelta(seconds=delay_seconds),
            'attempts': 0,
            'max_attempts': 3
        }
        self.push_queue.append(notification)
    
    def send_push_notification(self, notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if datetime.now() < notification['scheduled_time']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ
            self.push_queue.append(notification)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.execute_query(
                'SELECT telegram_id, language FROM users WHERE id = ?',
                (notification['user_id'],)
            )
            
            if user:
                telegram_id, language = user[0]
                
                # –õ–æ–∫–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                from localization import t
                localized_title = t(notification['title'], language=language) if notification['title'].startswith('push_') else notification['title']
                localized_message = t(notification['message'], language=language) if notification['message'].startswith('push_') else notification['message']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                type_emojis = {
                    'order': 'üì¶',
                    'payment': 'üí≥',
                    'delivery': 'üöö',
                    'promotion': 'üéÅ',
                    'reminder': '‚è∞',
                    'warning': '‚ö†Ô∏è',
                    'success': '‚úÖ',
                    'info': '‚ÑπÔ∏è'
                }
                
                emoji = type_emojis.get(notification['type'], 'üì±')
                push_text = f"{emoji} <b>{localized_title}</b>\n\n{localized_message}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                result = self.bot.send_message(telegram_id, push_text)
                
                if result and result.get('ok'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                    self.db.add_notification(
                        notification['user_id'],
                        localized_title,
                        localized_message,
                        notification['type']
                    )
                    logging.info(f"‚úÖ Push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
        except Exception as e:
            notification['attempts'] += 1
            logging.info(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification['user_id']}: {e}")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            if notification['attempts'] < notification['max_attempts']:
                notification['scheduled_time'] = datetime.now() + timedelta(minutes=5)
                self.push_queue.append(notification)
    
    def send_instant_push(self, user_id, title, message, notification_type='info'):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.queue_push_notification(user_id, title, message, notification_type, 0)
    
    def send_delayed_push(self, user_id, title, message, delay_minutes=0, notification_type='reminder'):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.queue_push_notification(user_id, title, message, notification_type, delay_minutes * 60)
    
    def send_order_notification_to_admins(self, order_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        order_details = self.db.get_order_details(order_id)
        if not order_details:
            return
        
        order = order_details['order']
        items = order_details['items']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = self.db.execute_query(
            'SELECT name, phone, email FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        notification_text = f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order[0]}</b>\n\n"
        notification_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user[0]}\n"
        
        if user[1]:
            notification_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[1]}\n"
        if user[2]:
            notification_text += f"üìß Email: {user[2]}\n"
        
        notification_text += f"\nüí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
        notification_text += f"üìÖ –í—Ä–µ–º—è: {format_date(order[7])}\n"
        
        if order[4]:
            notification_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        
        notification_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}\n"
        
        notification_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã ({len(items)}):</b>\n"
        for item in items:
            notification_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item[1] * item[0])}\n"
        
        notification_text += f"\nüëÜ /admin_order_{order[0]} - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admins = self.db.execute_query(
            'SELECT telegram_id FROM users WHERE is_admin = 1'
        )
        
        for admin in admins:
            try:
                self.bot.send_message(admin[0], notification_text)
                
                # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ
                admin_user = self.db.execute_query(
                    'SELECT id FROM users WHERE telegram_id = ?',
                    (admin[0],)
                )
                if admin_user:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self.send_instant_push(
                        admin_user[0][0],
                        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order[0]}",
                        f"–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {format_price(order[2])} –æ—Ç {user[0]}",
                        'order'
                    )
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin[0]}: {e}")
    
    def send_order_status_notification(self, order_id, new_status):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        order_details = self.db.get_order_details(order_id)
        if not order_details:
            return
        
        order = order_details['order']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db.execute_query(
            'SELECT telegram_id, name, language FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        from localization import t
        language = user[2]
        
        status_emoji = self.get_status_emoji(new_status)
        status_text = t(f'status_{new_status}', language=language)
        
        notification_text = f"üì¶ <b>{t('order_status_update', language=language)} #{order[0]}</b>\n\n"
        notification_text += f"{t('status_changed_to', language=language)}: {status_emoji} <b>{status_text}</b>\n\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if new_status == 'confirmed':
            notification_text += t('status_confirmed_message', language=language)
        elif new_status == 'shipped':
            notification_text += t('status_shipped_message', language=language)
        elif new_status == 'delivered':
            notification_text += t('status_delivered_message', language=language)
        elif new_status == 'cancelled':
            notification_text += t('status_cancelled_message', language=language)
        
        try:
            self.bot.send_message(user[0], notification_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            user_db_id = self.db.execute_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (user[0],)
            )[0][0]
            
            self.send_instant_push(
                user_db_id,
                f"push_order_status_update",
                notification_text,
                'order'
            )
            
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    
    def get_status_emoji(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'shipped': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def send_low_stock_alert(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
        low_stock_products = self.db.execute_query(
            'SELECT name, stock FROM products WHERE stock <= 5 AND is_active = 1'
        )
        
        if not low_stock_products:
            return
        
        alert_text = "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã!</b>\n\n"
        alert_text += "üì¶ <b>–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º:</b>\n\n"
        
        for product_name, stock in low_stock_products:
            if stock == 0:
                alert_text += f"üî¥ <b>{product_name}</b> - –ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò\n"
            else:
                alert_text += f"üü° <b>{product_name}</b> - –æ—Å—Ç–∞–ª–æ—Å—å {stock} —à—Ç.\n"
        
        alert_text += "\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admins = self.db.execute_query(
            'SELECT telegram_id FROM users WHERE is_admin = 1'
        )
        
        for admin in admins:
            try:
                self.bot.send_message(admin[0], alert_text)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–ª–∞–¥–µ –∞–¥–º–∏–Ω—É {admin[0]}: {e}")
    
    def send_daily_summary(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        daily_stats = self.db.execute_query('''
            SELECT 
                COUNT(*) as orders_count,
                SUM(total_amount) as revenue,
                COUNT(DISTINCT user_id) as unique_customers
            FROM orders 
            WHERE DATE(created_at) = ?
        ''', (today,))
        
        if not daily_stats or daily_stats[0][0] == 0:
            return  # –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å
        
        stats = daily_stats[0]
        
        summary_text = f"üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ {today}</b>\n\n"
        summary_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats[0]}\n"
        summary_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats[1] or 0)}\n"
        summary_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats[2]}\n\n"
        
        # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –∑–∞ –¥–µ–Ω—å
        top_products = self.db.execute_query('''
            SELECT p.name, SUM(oi.quantity) as sold
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            JOIN orders o ON oi.order_id = o.id
            WHERE DATE(o.created_at) = ?
            GROUP BY p.id, p.name
            ORDER BY sold DESC
            LIMIT 3
        ''', (today,))
        
        if top_products:
            summary_text += "üèÜ <b>–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –¥–Ω—è:</b>\n"
            for i, (name, sold) in enumerate(top_products, 1):
                summary_text += f"{i}. {name} - {sold} —à—Ç.\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        admins = self.db.execute_query(
            'SELECT telegram_id FROM users WHERE is_admin = 1'
        )
        
        for admin in admins:
            try:
                self.bot.send_message(admin[0], summary_text)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É {admin[0]}: {e}")
    
    def send_promotional_broadcast(self, message_text, target_group='all'):
        """–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        if target_group == 'all':
            users = self.db.execute_query(
                'SELECT telegram_id, name, language FROM users WHERE is_admin = 0'
            )
        elif target_group == 'active':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–µ–ª–∞–≤—à–∏–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            users = self.db.execute_query('''
                SELECT DISTINCT u.telegram_id, u.name, u.language
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE u.is_admin = 0 AND o.created_at >= datetime('now', '-30 days')
            ''')
        elif target_group == 'inactive':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            users = self.db.execute_query('''
                SELECT u.telegram_id, u.name, u.language
                FROM users u
                LEFT JOIN orders o ON u.id = o.user_id AND o.created_at >= datetime('now', '-30 days')
                WHERE u.is_admin = 0 AND o.id IS NULL
            ''')
        else:
            return 0, 0
        
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localized_message = self.localize_broadcast_message(message_text, user[2])
                self.bot.send_message(user[0], localized_message)
                success_count += 1
            except Exception as e:
                error_count += 1
                logging.info(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        
        return success_count, error_count
    
    def localize_broadcast_message(self, message, language):
        """–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if language == 'uz':
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–∑–±–µ–∫—Å–∫–æ–≥–æ
            message = message.replace('–°–∫–∏–¥–∫–∞', 'Chegirma')
            message = message.replace('–ê–∫—Ü–∏—è', 'Aksiya')
            message = message.replace('–ù–æ–≤–∏–Ω–∫–∞', 'Yangilik')
            message = message.replace('–¢–æ–≤–∞—Ä', 'Mahsulot')
        
        return message
    
    def check_and_send_birthday_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è"""
        # –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ birthday –≤ —Ç–∞–±–ª–∏—Ü—É users
        today = datetime.now().strftime('%m-%d')
        
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è birthday)
        # birthday_users = self.db.execute_query(
        #     'SELECT telegram_id, name FROM users WHERE strftime("%m-%d", birthday) = ?',
        #     (today,)
        # )
        
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        birthday_users = []
        
        for user in birthday_users:
            birthday_text = f"üéâ <b>–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {user[1]}!</b>\n\n"
            birthday_text += "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!\n"
            birthday_text += "–ü—Ä–æ–º–æ–∫–æ–¥: BIRTHDAY15\n\n"
            birthday_text += "üõç –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!"
            
            try:
                self.bot.send_message(user[0], birthday_text)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è {user[0]}: {e}")
    
    def send_cart_abandonment_reminder(self):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–±—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        abandoned_carts = self.db.execute_query('''
            SELECT DISTINCT u.telegram_id, u.name, u.language,
                   COUNT(c.id) as items_count,
                   SUM(p.price * c.quantity) as total_amount
            FROM users u
            JOIN cart c ON u.id = c.user_id
            JOIN products p ON c.product_id = p.id
            WHERE c.created_at <= datetime('now', '-1 day')
            GROUP BY u.id
        ''')
        
        for user in abandoned_carts:
            from localization import t
            language = user[2]
            
            reminder_text = f"üõí <b>{t('cart_reminder_title', language=language)}</b>\n\n"
            reminder_text += f"{t('cart_reminder_message', language=language)}\n\n"
            reminder_text += f"üì¶ {t('items_in_cart', language=language)}: {user[3]}\n"
            reminder_text += f"üí∞ {t('total_amount', language=language)}: {format_price(user[4])}\n\n"
            reminder_text += f"üéØ {t('cart_reminder_cta', language=language)}"
            
            try:
                self.bot.send_message(user[0], reminder_text)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user[0]}: {e}")
    
    def send_restock_notification(self, product_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        if not product:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        interested_users = self.db.execute_query('''
            SELECT u.telegram_id, u.name, u.language
            FROM users u
            JOIN favorites f ON u.id = f.user_id
            WHERE f.product_id = ?
        ''', (product_id,))
        
        for user in interested_users:
            from localization import t
            language = user[2]
            
            restock_text = f"üì¶ <b>{t('restock_notification', language=language)}</b>\n\n"
            restock_text += f"üõç <b>{product[1]}</b>\n"
            restock_text += f"üí∞ {format_price(product[3])}\n\n"
            restock_text += f"‚úÖ {t('back_in_stock', language=language)}\n"
            restock_text += f"üèÉ‚Äç‚ôÇÔ∏è {t('order_now', language=language)}"
            
            try:
                self.bot.send_message(user[0], restock_text)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ {user[0]}: {e}")
    
    def send_weekly_recommendations(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = self.db.execute_query('''
            SELECT DISTINCT u.telegram_id, u.name, u.language, u.id
            FROM users u
            JOIN orders o ON u.id = o.user_id
            WHERE u.is_admin = 0 AND o.created_at >= datetime('now', '-30 days')
        ''')
        
        for user in active_users:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
            recommendations = self.db.execute_query('''
                SELECT DISTINCT p.id, p.name, p.price, p.image_url
                FROM products p
                JOIN categories c ON p.category_id = c.id
                WHERE p.is_active = 1 
                AND p.id NOT IN (
                    SELECT DISTINCT oi.product_id
                    FROM order_items oi
                    JOIN orders o ON oi.order_id = o.id
                    WHERE o.user_id = ?
                )
                AND c.id IN (
                    SELECT DISTINCT p2.category_id
                    FROM products p2
                    JOIN order_items oi2 ON p2.id = oi2.product_id
                    JOIN orders o2 ON oi2.order_id = o2.id
                    WHERE o2.user_id = ?
                )
                ORDER BY p.views DESC, p.sales_count DESC
                LIMIT 3
            ''', (user[3], user[3]))
            
            if recommendations:
                from localization import t
                language = user[2]
                
                rec_text = f"üí° <b>{t('weekly_recommendations', language=language)}</b>\n\n"
                rec_text += f"üëã {user[1]}, {t('recommendations_intro', language=language)}\n\n"
                
                for product in recommendations:
                    rec_text += f"üõç <b>{product[1]}</b>\n"
                    rec_text += f"üí∞ {format_price(product[2])}\n\n"
                
                rec_text += f"üéØ {t('check_catalog', language=language)}"
                
                try:
                    self.bot.send_message(user[0], rec_text)
                except Exception as e:
                    logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {user[0]}: {e}")
    
    def send_promotional_campaign(self, campaign_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏–∏"""
        target_users = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        if campaign_data['target'] == 'new_users':
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            target_users = self.db.execute_query('''
                SELECT telegram_id, name, language
                FROM users
                WHERE is_admin = 0 AND created_at >= datetime('now', '-7 days')
            ''')
        elif campaign_data['target'] == 'big_spenders':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Å—É–º–º—É –±–æ–ª—å—à–µ $100
            target_users = self.db.execute_query('''
                SELECT DISTINCT u.telegram_id, u.name, u.language
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE u.is_admin = 0 AND o.total_amount >= 100
            ''')
        elif campaign_data['target'] == 'category_buyers':
            # –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            target_users = self.db.execute_query('''
                SELECT DISTINCT u.telegram_id, u.name, u.language
                FROM users u
                JOIN orders o ON u.id = o.user_id
                JOIN order_items oi ON o.id = oi.order_id
                JOIN products p ON oi.product_id = p.id
                WHERE u.is_admin = 0 AND p.category_id = ?
            ''', (campaign_data.get('category_id'),))
        
        success_count = 0
        for user in target_users:
            try:
                # –õ–æ–∫–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                localized_message = self.localize_broadcast_message(
                    campaign_data['message'], 
                    user[2]
                )
                
                self.bot.send_message(user[0], localized_message)
                success_count += 1
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {user[0]}: {e}")
        
        return success_count