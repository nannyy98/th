"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""
import logging

import json
import urllib.request
import urllib.parse

class PaymentProcessor:
    def __init__(self):
        self.providers = {
            'payme': PaymeProvider(),
            'click': ClickProvider(),
            'stripe': StripeProvider(),
            'paypal': PayPalProvider(),
            'zoodpay': ZoodPayProvider()
        }
    
    def create_payment(self, provider, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider not in self.providers:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        
        return self.providers[provider].create_payment(amount, order_id, user_data)
    
    def verify_payment(self, provider, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        if provider not in self.providers:
            return False
        
        return self.providers[provider].verify_payment(payment_data)

class PaymeProvider:
    def __init__(self):
        self.merchant_id = "PAYME_MERCHANT_ID"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
        self.secret_key = "PAYME_SECRET_KEY"   # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
        self.base_url = "https://checkout.paycom.uz"
    
    def create_payment(self, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Payme"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∏–π–∏–Ω—ã (1 —Å—É–º = 100 —Ç–∏–π–∏–Ω)
        amount_tiyin = int(amount * 100 * 100)  # USD -> UZS -> tiyin
        
        params = {
            'm': self.merchant_id,
            'ac.order_id': str(order_id),
            'a': str(amount_tiyin),
            'c': f"https://t.me/your_bot?start=payment_{order_id}",
            'l': 'ru'  # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        }
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        query_string = urllib.parse.urlencode(params)
        payment_url = f"{self.base_url}?{query_string}"
        
        return {
            'url': payment_url,
            'provider': 'payme',
            'amount': amount,
            'order_id': order_id
        }
    
    def verify_payment(self, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ Payme —á–µ—Ä–µ–∑ webhook"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
        return payment_data.get('state') == 2  # 2 = —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ

class ClickProvider:
    def __init__(self):
        self.merchant_id = "CLICK_MERCHANT_ID"
        self.service_id = "CLICK_SERVICE_ID"
        self.secret_key = "CLICK_SECRET_KEY"
        self.base_url = "https://my.click.uz/services/pay"
    
    def create_payment(self, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Click"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—É–º—ã
        amount_uzs = int(amount * 12000)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å USD -> UZS
        
        params = {
            'service_id': self.service_id,
            'merchant_id': self.merchant_id,
            'amount': str(amount_uzs),
            'transaction_param': str(order_id),
            'return_url': f"https://t.me/your_bot?start=payment_{order_id}",
            'merchant_user_id': str(user_data.get('telegram_id', ''))
        }
        
        query_string = urllib.parse.urlencode(params)
        payment_url = f"{self.base_url}?{query_string}"
        
        return {
            'url': payment_url,
            'provider': 'click',
            'amount': amount,
            'order_id': order_id
        }
    
    def verify_payment(self, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ Click"""
        return payment_data.get('error') == '0'

class StripeProvider:
    def __init__(self):
        self.secret_key = "STRIPE_SECRET_KEY"
        self.publishable_key = "STRIPE_PUBLISHABLE_KEY"
        self.base_url = "https://api.stripe.com/v1"
    
    def create_payment(self, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stripe"""
        # Stripe —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–µ–Ω—Ç–∞—Ö
        amount_cents = int(amount * 100)
        
        # –°–æ–∑–¥–∞–µ–º Payment Intent —á–µ—Ä–µ–∑ API
        data = {
            'amount': str(amount_cents),
            'currency': 'usd',
            'metadata[order_id]': str(order_id),
            'automatic_payment_methods[enabled]': 'true'
        }
        
        headers = {
            'Authorization': f'Bearer {self.secret_key}',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(
                f"{self.base_url}/payment_intents",
                data=data_encoded,
                headers=headers,
                method='POST'
            )
            
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                
                return {
                    'url': f"https://checkout.stripe.com/pay/{result['client_secret']}",
                    'provider': 'stripe',
                    'amount': amount,
                    'order_id': order_id,
                    'payment_intent_id': result['id']
                }
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stripe –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    def verify_payment(self, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ Stripe"""
        return payment_data.get('status') == 'succeeded'

class PayPalProvider:
    def __init__(self):
        self.client_id = "PAYPAL_CLIENT_ID"
        self.client_secret = "PAYPAL_CLIENT_SECRET"
        self.base_url = "https://api.paypal.com"  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        # self.base_url = "https://api.sandbox.paypal.com"  # –î–ª—è —Ç–µ—Å—Ç–æ–≤
    
    def create_payment(self, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayPal"""
        payment_data = {
            "intent": "CAPTURE",
            "purchase_units": [{
                "reference_id": str(order_id),
                "amount": {
                    "currency_code": "USD",
                    "value": f"{amount:.2f}"
                }
            }],
            "application_context": {
                "return_url": f"https://t.me/your_bot?start=payment_success_{order_id}",
                "cancel_url": f"https://t.me/your_bot?start=payment_cancel_{order_id}"
            }
        }
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PayPal API
        return {
            'url': f"https://www.paypal.com/checkoutnow?token=EXAMPLE_TOKEN",
            'provider': 'paypal',
            'amount': amount,
            'order_id': order_id
        }
    
    def verify_payment(self, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ PayPal"""
        return payment_data.get('status') == 'COMPLETED'

class ZoodPayProvider:
    def __init__(self):
        self.merchant_id = "ZOODPAY_MERCHANT_ID"
        self.secret_key = "ZOODPAY_SECRET_KEY"
        self.base_url = "https://api.zoodpay.com"
    
    def create_payment(self, amount, order_id, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ ZoodPay"""
        payment_data = {
            'merchant_reference': str(order_id),
            'amount': f"{amount:.2f}",
            'currency': 'USD',
            'customer': {
                'first_name': user_data.get('name', ''),
                'phone': user_data.get('phone', ''),
                'email': user_data.get('email', '')
            },
            'success_url': f"https://t.me/your_bot?start=payment_success_{order_id}",
            'error_url': f"https://t.me/your_bot?start=payment_error_{order_id}"
        }
        
        return {
            'url': f"https://checkout.zoodpay.com/pay?data={json.dumps(payment_data)}",
            'provider': 'zoodpay',
            'amount': amount,
            'order_id': order_id
        }
    
    def verify_payment(self, payment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ ZoodPay"""
        return payment_data.get('status') == 'paid'

def create_payment_keyboard(order_id, amount):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    return {
        'inline_keyboard': [
            [
                {'text': 'üí≥ Payme', 'callback_data': f'pay_payme_{order_id}_{amount}'},
                {'text': 'üîµ Click', 'callback_data': f'pay_click_{order_id}_{amount}'}
            ],
            [
                {'text': 'üíé Stripe', 'callback_data': f'pay_stripe_{order_id}_{amount}'},
                {'text': 'üü° PayPal', 'callback_data': f'pay_paypal_{order_id}_{amount}'}
            ],
            [
                {'text': 'ü¶ì ZoodPay', 'callback_data': f'pay_zoodpay_{order_id}_{amount}'},
                {'text': 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏', 'callback_data': f'pay_cash_{order_id}'}
            ],
            [
                {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'cancel_payment'}
            ]
        ]
    }

def format_payment_info(payment_result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    if not payment_result:
        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
    
    provider_names = {
        'payme': 'Payme',
        'click': 'Click',
        'stripe': 'Stripe',
        'paypal': 'PayPal',
        'zoodpay': 'ZoodPay'
    }
    
    provider_name = provider_names.get(payment_result['provider'], payment_result['provider'])
    
    info = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {provider_name}</b>\n\n"
    info += f"üí∞ –°—É–º–º–∞: ${payment_result['amount']:.2f}\n"
    info += f"üì¶ –ó–∞–∫–∞–∑: #{payment_result['order_id']}\n\n"
    info += f"üëÜ <a href='{payment_result['url']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>"
    
    return info