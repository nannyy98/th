"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""
import logging

import threading
import time
from logger import logger

# –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class SimpleScheduler:
    def __init__(self):
        self.jobs = []
    
    def every(self):
        return ScheduleJob(self)
    
    def run_pending(self):
        import time
        now = time.time()
        current_time = time.strftime('%H:%M', time.localtime(now))
        current_date = time.strftime('%Y-%m-%d', time.localtime(now))
        
        for job in self.jobs:
            if job.should_run(current_time, current_date):
                try:
                    job.run()
                except Exception as e:
                    logging.info(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    def clear(self):
        self.jobs.clear()

class ScheduleJob:
    def __init__(self, scheduler):
        self.scheduler = scheduler
        self.job_func = None
        self.job_args = ()
        self.time = None
        self.last_run = None
    
    @property
    def day(self):
        return self
    
    def at(self, time_str):
        self.time = time_str
        return self
    
    def do(self, job_func, *args):
        self.job_func = job_func
        self.job_args = args
        self.scheduler.jobs.append(self)
        return self
    
    def should_run(self, current_time, current_date):
        if not self.time:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å
        if current_time == self.time:
            if not self.last_run or self.last_run != current_date:
                return True
        
        return False
    
    def run(self):
        if self.job_func:
            self.last_run = time.strftime('%Y-%m-%d', time.localtime())
            self.job_func(*self.job_args)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
schedule = SimpleScheduler()

class ScheduledPostsManager:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.scheduler_running = False
        from os import getenv
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π –∫–∞–Ω–∞–ª: POST_CHANNEL_ID (env) –∏–ª–∏ BOT_CONFIG['post_channel_id']
        try:
            from config import BOT_CONFIG
        except Exception:
            BOT_CONFIG = {}
        cfg_channel = getenv('POST_CHANNEL_ID') or BOT_CONFIG.get('post_channel_id')
        self.channel_id = str(cfg_channel or '-1002566537425')  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å @username –∏–ª–∏ -100...
        self.start_scheduler()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        if self.scheduler_running:
            return
        
        def scheduler_worker():
            while True:
                try:
                    schedule.run_pending()
                    time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤: {e}")
                    time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        self.load_schedule_from_database()
        
        scheduler_thread = threading.Thread(target=scheduler_worker, daemon=True)
        scheduler_thread.start()
        self.scheduler_running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def load_schedule_from_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
            scheduled_posts = self.db.execute_query('''
                SELECT id, title, content, time_morning, time_afternoon, time_evening, 
                       target_audience, is_active
                FROM scheduled_posts 
                WHERE is_active = 1
            ''')
            
            for post in scheduled_posts:
                post_id, title, content, morning, afternoon, evening, audience, active = post
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
                if morning:
                    schedule.every().day.at(morning).do(
                        self.send_scheduled_post, post_id, 'morning'
                    )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç
                if afternoon:
                    schedule.every().day.at(afternoon).do(
                        self.send_scheduled_post, post_id, 'afternoon'
                    )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
                if evening:
                    schedule.every().day.at(evening).do(
                        self.send_scheduled_post, post_id, 'evening'
                    )
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scheduled_posts)} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def send_scheduled_post(self, post_id, time_period):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ {post_id} ({time_period})...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = self.db.execute_query(
                'SELECT title, content, target_audience, image_url FROM scheduled_posts WHERE id = ?',
                (post_id,)
            )
            
            if not post_data:
                logging.info(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            title, content, target_audience, image_url = post_data[0]
            logging.info(f"üìù –ü–æ—Å—Ç: {title}, –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_audience}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = self.get_target_audience(target_audience)
            
            if not recipients:
                logging.info(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                return
            
            logging.info(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self.format_post_message(title, content, time_period)
            logging.info(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            keyboard = self.create_post_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù –ø–æ—Å—Ç
            success_count = 0
            error_count = 0
            
            if target_audience == 'channel':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
                logging.info(f"üì∫ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
                try:
                    if image_url:
                        result = self.bot.send_photo(self.channel_id, image_url, message_text, keyboard)
                    else:
                        result = self.bot.send_message(self.channel_id, message_text, keyboard)
                    
                    if result and result.get('ok'):
                        success_count = 1
                        logging.info(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                        
                        
                        
                        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                        # self.send_product_reviews_to_channel()
                    else:
                        error_count = error_count + 1 if 'error_count' in locals() else 1
                        logging.info('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ, –∏ POST_CHANNEL_ID –≤–µ—Ä–Ω—ã–π.')
                        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {result}")
                except Exception as e:
                    error_count = 1
                    logging.info(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for recipient in recipients:
                    try:
                        telegram_id = recipient[0] if isinstance(recipient, (list, tuple)) else recipient.get('telegram_id')
                        if image_url:
                            result = self.bot.send_photo(telegram_id, image_url, message_text, keyboard)
                        else:
                            result = self.bot.send_message(telegram_id, message_text, keyboard)
                        
                        if result and result.get('ok'):
                            success_count += 1
                        else:
                            error_count += 1
                    except Exception as e:
                        error_count += 1
                        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
            self.db.execute_query('''
                INSERT INTO post_statistics (
                    post_id, time_period, sent_count, error_count, sent_at
                ) VALUES (?, ?, ?, ?, ?)
            ''', (
                post_id, time_period, success_count, error_count, current_time
            ))
            
            logging.info(f"üìä –ü–æ—Å—Ç {post_id} ({time_period}): –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
            
        except Exception as e:
            logging.info(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    def get_target_audience(self, audience_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        if audience_type == 'channel':
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
            return [(self.channel_id, '–ö–∞–Ω–∞–ª', 'ru')]
        elif audience_type == 'all':
            return self.db.execute_query(
                'SELECT telegram_id, name, language FROM users WHERE is_admin = 0'
            )
        elif audience_type == 'active':
            return self.db.execute_query('''
                SELECT DISTINCT u.telegram_id, u.name, u.language
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE u.is_admin = 0 AND o.created_at >= datetime('now', '-30 days')
            ''')
        elif audience_type == 'vip':
            return self.db.execute_query('''
                SELECT DISTINCT u.telegram_id, u.name, u.language
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE u.is_admin = 0
                GROUP BY u.id
                HAVING SUM(o.total_amount) >= 500
            ''')
        elif audience_type == 'new':
            return self.db.execute_query('''
                SELECT telegram_id, name, language
                FROM users
                WHERE is_admin = 0 AND created_at >= datetime('now', '-7 days')
            ''')
        else:
            return []
    
    def format_post_message(self, title, content, time_period):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
        time_emojis = {
            'morning': 'üåÖ',
            'afternoon': '‚òÄÔ∏è',
            'evening': 'üåÜ'
        }
        
        time_greetings = {
            'morning': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
            'afternoon': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å', 
            'evening': '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
        }
        
        emoji = time_emojis.get(time_period, 'üì¢')
        greeting = time_greetings.get(time_period, '–ü—Ä–∏–≤–µ—Ç')
        
        message = f"{emoji} <b>{greeting}!</b>\n\n"
        
        if title:
            message += f"üì¢ <b>{title}</b>\n\n"
        
        message += content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        message += f"\n\nüõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥: /start"
        
        return message
    
    def create_post_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
        return {
            'inline_keyboard': [
                [
                    {'text': 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', 'url': 'https://t.me/Safar_call_bot'},
                    {'text': 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'url': 'https://your-website.com'}
                ],
                [
                    {'text': 'üì± –ö–∞—Ç–∞–ª–æ–≥ –≤ –±–æ—Ç–µ', 'url': 'https://t.me/Safar_call_bot?start=catalog'},
                    {'text': 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'url': 'https://t.me/your_support_username'}
                ]
            ]
        }
    
    def send_product_reviews_to_channel(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–∞–Ω–∞–ª (–¢–û–õ–¨–ö–û –ü–û –ó–ê–ü–†–û–°–£)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
            popular_products_with_reviews = self.db.execute_query('''
                SELECT 
                    p.id, p.name, p.price, p.image_url,
                    AVG(r.rating) as avg_rating,
                    COUNT(r.id) as reviews_count
                FROM products p
                JOIN reviews r ON p.id = r.product_id
                WHERE p.is_active = 1
                GROUP BY p.id, p.name, p.price, p.image_url
                HAVING reviews_count >= 3
                ORDER BY avg_rating DESC, reviews_count DESC
                LIMIT 3
            ''')
            
            if not popular_products_with_reviews:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                popular_products = self.db.execute_query('''
                    SELECT id, name, price, image_url, views, sales_count
                    FROM products
                    WHERE is_active = 1
                    ORDER BY views DESC, sales_count DESC
                    LIMIT 3
                ''')
                
                for product in popular_products:
                    self.send_product_with_buttons(product, has_reviews=False)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å –æ—Ç–∑—ã–≤–∞–º–∏
            for product in popular_products_with_reviews:
                self.send_product_with_buttons(product, has_reviews=True)
                
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –∫–∞–Ω–∞–ª: {e}")
    
    def send_product_with_buttons(self, product, has_reviews=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏"""
        try:
            if has_reviews:
                product_id, name, price, image_url, avg_rating, reviews_count = product
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
                recent_reviews = self.db.execute_query('''
                    SELECT r.rating, r.comment, r.created_at, u.name
                    FROM reviews r
                    JOIN users u ON r.user_id = u.id
                    WHERE r.product_id = ? AND r.comment IS NOT NULL AND r.comment != ''
                    ORDER BY r.created_at DESC
                    LIMIT 3
                ''', (product_id,))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ
                product_message = f"üõç <b>{name}</b>\n\n"
                product_message += f"üí∞ –¶–µ–Ω–∞: <b>${price:.2f}</b>\n"
                product_message += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
                if recent_reviews:
                    product_message += f"üí¨ <b>–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:</b>\n\n"
                    for review in recent_reviews:
                        stars = '‚≠ê' * review[0]
                        product_message += f"{stars} <b>{review[3]}</b>\n"
                        if review[1]:
                            product_message += f"üí≠ <i>\"{review[1][:100]}{'...' if len(review[1]) > 100 else ''}\"</i>\n"
                        product_message += f"üìÖ {review[2][:10]}\n\n"
            else:
                product_id, name, price, image_url, views, sales_count = product
                
                product_message = f"üõç <b>{name}</b>\n\n"
                product_message += f"üí∞ –¶–µ–Ω–∞: <b>${price:.2f}</b>\n"
                product_message += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}\n"
                product_message += f"üõí –ü—Ä–æ–¥–∞–Ω–æ: {sales_count} —à—Ç.\n\n"
                product_message += f"üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ!"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            product_keyboard = {
                'inline_keyboard': [
                    [
                        {'text': 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä', 'url': f'https://t.me/Safar_call_bot?start=product_{product_id}'},
                        {'text': 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'url': f'https://your-website.com/product/{product_id}'}
                    ],
                    [
                        {'text': '‚≠ê –í—Å–µ –æ—Ç–∑—ã–≤—ã', 'url': f'https://t.me/Safar_call_bot?start=reviews_{product_id}'},
                        {'text': 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'url': 'https://t.me/your_support_username'}
                    ]
                ]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if image_url:
                self.bot.send_photo(self.channel_id, image_url, product_message, product_keyboard)
            else:
                self.bot.send_message(self.channel_id, product_message, product_keyboard)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            time.sleep(2)
            
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
    
    def create_scheduled_post(self, title, content, morning_time=None, afternoon_time=None, evening_time=None, target_audience='all'):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
        return self.db.execute_query('''
            INSERT INTO scheduled_posts (
                title, content, time_morning, time_afternoon, time_evening,
                target_audience, is_active, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, 1, ?)
        ''', (
            title, content, morning_time, afternoon_time, evening_time,
            target_audience, current_time
        ))