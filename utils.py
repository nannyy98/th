"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""
import logging

from datetime import datetime
import re

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"${price:.2f}"

def format_date(date_string):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    try:
        if isinstance(date_string, str):
            if 'T' in date_string:
                date_obj = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            else:
                date_obj = datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')
        else:
            date_obj = date_string
        return date_obj.strftime('%d.%m.%Y %H:%M')
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date_string}: {e}")
        return date_string

def validate_email(email):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç
    if len(clean_phone) >= 10 and (clean_phone.startswith('+') or clean_phone.isdigit()):
        return clean_phone
    return None

def truncate_text(text, max_length=100):
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def create_pagination_keyboard(current_page, total_pages, callback_prefix):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    keyboard = []
    
    if total_pages > 1:
        row = []
        
        if current_page > 1:
            row.append({
                'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                'callback_data': f'{callback_prefix}_{current_page - 1}'
            })
        
        row.append({
            'text': f'{current_page}/{total_pages}',
            'callback_data': 'current_page'
        })
        
        if current_page < total_pages:
            row.append({
                'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
                'callback_data': f'{callback_prefix}_{current_page + 1}'
            })
        
        keyboard.append(row)
    
    return keyboard

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    return (str(text)
            .replace('&', '&amp;')
            .replace('<', '&lt;')
            .replace('>', '&gt;')
            .replace('"', '&quot;')
            .replace("'", '&#x27;'))

def calculate_cart_total(cart_items):
    """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã"""
    return sum(item[2] * item[3] for item in cart_items)

def format_cart_summary(cart_items):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ"""
    if not cart_items:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    total_items = sum(item[3] for item in cart_items)
    total_price = calculate_cart_total(cart_items)
    
    return f"üõí {total_items} —Ç–æ–≤–∞—Ä(–æ–≤) –Ω–∞ —Å—É–º–º—É {format_price(total_price)}"

def get_order_status_emoji(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_emojis = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'shipped': 'üöö',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    return status_emojis.get(status, '‚ùì')

def get_order_status_text(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_texts = {
        'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return status_texts.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def create_product_card(product):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    # 0:id,1:name,2:description,3:price,7:image_url,8:stock,9:views
    name = product[1]
    description = product[2] if len(product) > 2 else ''
    price = product[3] if len(product) > 3 else 0
    stock = product[8] if len(product) > 8 else 0
    views = product[9] if len(product) > 9 else 0

    nl = chr(10)
    card = "<b>" + escape_html(name) + "</b>" + nl + nl
    if description:
        card += escape_html(truncate_text(description, 150)) + nl + nl
    card += "üí∞ –¶–µ–Ω–∞: <b>" + format_price(price) + "</b>" + nl
    card += "üì¶ –í –Ω–∞–ª–∏—á–∏–∏: " + str(stock) + " —à—Ç." + nl
    card += "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: " + str(views) + nl
    return card

def log_user_action(telegram_id, action, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    logging.info(f"[{timestamp}] User {telegram_id}: {action} {details}")

def format_order_summary(order, items):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    status_emoji = get_order_status_emoji(order[3])
    
    summary = f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]} - {format_price(order[2])}\n"
    summary += f"üìÖ {format_date(order[7])}\n"
    summary += f"üì¶ {len(items)} —Ç–æ–≤–∞—Ä(–æ–≤)"
    
    return summary

def create_stars_display(rating):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    full_stars = int(rating)
    half_star = 1 if rating - full_stars >= 0.5 else 0
    empty_stars = 5 - full_stars - half_star
    
    stars = '‚≠ê' * full_stars
    if half_star:
        stars += '‚ú®'
    stars += '‚òÜ' * empty_stars
    
    return stars

def send_telegram_message(bot_token, chat_id, text, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    import json
    import urllib.request
    import urllib.parse
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    try:
        data_encoded = urllib.parse.urlencode(data).encode('utf-8')
        req = urllib.request.Request(url, data=data_encoded, method='POST')
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result.get('ok', False)
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def schedule_notification(notification_manager, notification_type, delay_hours=0):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    import time
    import threading
    
    def delayed_notification():
        if delay_hours > 0:
            time.sleep(delay_hours * 3600)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        if notification_type == 'low_stock':
            notification_manager.send_low_stock_alert()
        elif notification_type == 'daily_summary':
            notification_manager.send_daily_summary()
        elif notification_type == 'cart_abandonment':
            notification_manager.send_cart_abandonment_reminder()
        elif notification_type == 'weekly_recommendations':
            notification_manager.send_weekly_recommendations()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=delayed_notification)
    thread.daemon = True
    thread.start()

def format_notification_summary(notifications):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not notifications:
        return "üîî –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç"
    
    summary = f"üîî <b>–£ –≤–∞—Å {len(notifications)} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
    
    for notif in notifications[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        type_emoji = {
            'order': 'üì¶',
            'order_status': 'üìã',
            'promotion': 'üéÅ',
            'system': '‚öôÔ∏è',
            'info': '‚ÑπÔ∏è'
        }.get(notif[4], '‚ÑπÔ∏è')
        
        summary += f"{type_emoji} <b>{notif[2]}</b>\n"
        summary += f"   {truncate_text(notif[3], 60)}\n"
        summary += f"   üìÖ {format_date(notif[6])}\n\n"
    
    if len(notifications) > 5:
        summary += f"... –∏ –µ—â–µ {len(notifications) - 5} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
    
    summary += "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /notifications –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö"
    
    return summary

def send_push_to_user(bot, user_id, title, message, notification_type='info'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database import DatabaseManager
        db = DatabaseManager()
        
        user = db.execute_query(
            'SELECT telegram_id, language FROM users WHERE id = ?',
            (user_id,)
        )
        
        if user:
            telegram_id, language = user[0]
            
            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            from localization import t
            localized_title = t(title, language=language) if title.startswith('push_') else title
            localized_message = t(message, language=language) if message.startswith('push_') else message
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
            type_emojis = {
                'order': 'üì¶',
                'payment': 'üí≥',
                'delivery': 'üöö',
                'promotion': 'üéÅ',
                'reminder': '‚è∞',
                'warning': '‚ö†Ô∏è',
                'success': '‚úÖ',
                'info': '‚ÑπÔ∏è'
            }
            
            emoji = type_emojis.get(notification_type, 'üì±')
            push_text = f"{emoji} <b>{localized_title}</b>\n\n{localized_message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            result = bot.send_message(telegram_id, push_text)
            
            if result and result.get('ok'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                db.add_notification(user_id, localized_title, localized_message, notification_type)
                return True
                
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    return False

def schedule_push_notification(notification_manager, user_id, title, message, delay_minutes=0, notification_type='reminder'):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    notification_manager.send_delayed_push(
        user_id, title, message, delay_minutes, notification_type
    )